import {
  Fragment,
  Transition,
  TransitionGroup,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  mergeProps,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  openBlock,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  withCtx,
  withKeys,
  withModifiers
} from "./chunk-J6475X5X.js";
import "./chunk-SSYGV25P.js";

// node_modules/vue-cal/dist/vue-cal.es.js
var ae = Object.defineProperty;
var le = (e, t, i) => t in e ? ae(e, t, { enumerable: true, configurable: true, writable: true, value: i }) : e[t] = i;
var W = (e, t, i) => (le(e, typeof t != "symbol" ? t + "" : t, i), i);
var N;
var J;
var Q;
var O;
var I = {};
var F = {};
var de = class {
  constructor(t) {
    W(this, "_vuecal", null);
    W(this, "selectCell", (t2 = false, i, n) => {
      this._vuecal.$emit("cell-click", n ? { date: i, split: n } : i), this._vuecal.clickToNavigate || t2 ? this._vuecal.switchToNarrowerView() : this._vuecal.dblclickToNavigate && "ontouchstart" in window && (this._vuecal.domEvents.dblTapACell.taps++, setTimeout(() => this._vuecal.domEvents.dblTapACell.taps = 0, this._vuecal.domEvents.dblTapACell.timeout), this._vuecal.domEvents.dblTapACell.taps >= 2 && (this._vuecal.domEvents.dblTapACell.taps = 0, this._vuecal.switchToNarrowerView(), this._vuecal.$emit("cell-dblclick", n ? { date: i, split: n } : i)));
    });
    W(this, "keyPressEnterCell", (t2, i) => {
      this._vuecal.$emit("cell-keypress-enter", i ? { date: t2, split: i } : t2), this._vuecal.switchToNarrowerView();
    });
    W(this, "getPosition", (t2) => {
      const { left: i, top: n } = this._vuecal.cellsEl.getBoundingClientRect(), { clientX: l, clientY: s } = "ontouchstart" in window && t2.touches ? t2.touches[0] : t2;
      return { x: l - i, y: s - n };
    });
    W(this, "minutesAtCursor", (t2) => {
      let i = 0, n = { x: 0, y: 0 };
      const { timeStep: l, timeCellHeight: s, timeFrom: o } = this._vuecal.$props;
      return typeof t2 == "number" ? i = t2 : typeof t2 == "object" && (n = this.getPosition(t2), i = Math.round(n.y * l / parseInt(s) + o)), { minutes: Math.max(Math.min(i, 1440), 0), cursorCoords: n };
    });
    this._vuecal = t;
  }
};
var y;
var D;
var R;
var ue = class {
  constructor(t, i) {
    W(this, "_vuecal", null);
    W(this, "eventDefaults", { _eid: null, start: "", startTimeMinutes: 0, end: "", endTimeMinutes: 0, title: "", content: "", background: false, allDay: false, segments: null, repeat: null, daysCount: 1, deletable: true, deleting: false, titleEditable: true, resizable: true, resizing: false, draggable: true, dragging: false, draggingStatic: false, focused: false, class: "" });
    this._vuecal = t, y = i;
  }
  createAnEvent(t, i, n) {
    if (typeof t == "string" && (t = y.stringToDate(t)), !(t instanceof Date))
      return false;
    const l = y.dateToMinutes(t), s = l + (i = 1 * i || 120), o = y.addMinutes(new Date(t), i);
    n.end && (typeof n.end == "string" && (n.end = y.stringToDate(n.end)), n.endTimeMinutes = y.dateToMinutes(n.end));
    const a = { ...this.eventDefaults, _eid: `${this._vuecal._.uid}_${this._vuecal.eventIdIncrement++}`, start: t, startTimeMinutes: l, end: o, endTimeMinutes: s, segments: null, ...n };
    return typeof this._vuecal.onEventCreate != "function" || this._vuecal.onEventCreate(a, () => this.deleteAnEvent(a)) ? (a.startDateF !== a.endDateF && (a.daysCount = y.countDays(a.start, a.end)), this._vuecal.mutableEvents.push(a), this._vuecal.addEventsToView([a]), this._vuecal.emitWithEvent("event-create", a), this._vuecal.$emit("event-change", { event: this._vuecal.cleanupEvent(a), originalEvent: null }), a) : void 0;
  }
  addEventSegment(t) {
    t.segments || (t.segments = {}, t.segments[y.formatDateLite(t.start)] = { start: t.start, startTimeMinutes: t.startTimeMinutes, endTimeMinutes: 1440, isFirstDay: true, isLastDay: false });
    const i = t.segments[y.formatDateLite(t.end)];
    i && (i.isLastDay = false, i.endTimeMinutes = 1440);
    const n = y.addDays(t.end, 1), l = y.formatDateLite(n);
    return n.setHours(0, 0, 0, 0), t.segments[l] = { start: n, startTimeMinutes: 0, endTimeMinutes: t.endTimeMinutes, isFirstDay: false, isLastDay: true }, t.end = y.addMinutes(n, t.endTimeMinutes), t.daysCount = Object.keys(t.segments).length, l;
  }
  removeEventSegment(t) {
    let i = Object.keys(t.segments).length;
    if (i <= 1)
      return y.formatDateLite(t.end);
    delete t.segments[y.formatDateLite(t.end)], i--;
    const n = y.subtractDays(t.end, 1), l = y.formatDateLite(n), s = t.segments[l];
    return i ? s && (s.isLastDay = true, s.endTimeMinutes = t.endTimeMinutes) : t.segments = null, t.daysCount = i || 1, t.end = n, l;
  }
  createEventSegments(t, i, n) {
    const l = i.getTime(), s = n.getTime();
    let o, a, d, r = t.start.getTime(), u = t.end.getTime(), m = false;
    for (t.end.getHours() || t.end.getMinutes() || (u -= 1e3), t.segments = {}, t.repeat ? (o = l, a = Math.min(s, t.repeat.until ? y.stringToDate(t.repeat.until).getTime() : s)) : (o = Math.max(l, r), a = Math.min(s, u)); o <= a; ) {
      let p = false;
      const E = y.addDays(new Date(o), 1).setHours(0, 0, 0, 0);
      let _, x, V, C;
      if (t.repeat) {
        const Y = new Date(o), A = y.formatDateLite(Y);
        (m || t.occurrences && t.occurrences[A]) && (m || (r = t.occurrences[A].start, d = new Date(r).setHours(0, 0, 0, 0), u = t.occurrences[A].end), m = true, p = true), _ = o === d, x = A === y.formatDateLite(new Date(u)), V = new Date(_ ? r : o), C = y.formatDateLite(V), x && (m = false);
      } else
        p = true, _ = o === r, x = a === u && E > a, V = _ ? t.start : new Date(o), C = y.formatDateLite(_ ? t.start : V);
      p && (t.segments[C] = { start: V, startTimeMinutes: _ ? t.startTimeMinutes : 0, endTimeMinutes: x ? t.endTimeMinutes : 1440, isFirstDay: _, isLastDay: x }), o = E;
    }
    return t;
  }
  deleteAnEvent(t) {
    this._vuecal.emitWithEvent("event-delete", t), this._vuecal.mutableEvents = this._vuecal.mutableEvents.filter((i) => i._eid !== t._eid), this._vuecal.view.events = this._vuecal.view.events.filter((i) => i._eid !== t._eid);
  }
  checkCellOverlappingEvents(t, i) {
    R = t.slice(0), D = {}, t.forEach((l) => {
      R.shift(), D[l._eid] || (D[l._eid] = { overlaps: [], start: l.start, position: 0 }), D[l._eid].position = 0, R.forEach((s) => {
        D[s._eid] || (D[s._eid] = { overlaps: [], start: s.start, position: 0 });
        const o = this.eventInRange(s, l.start, l.end), a = i.overlapsPerTimeStep ? y.datesInSameTimeStep(l.start, s.start, i.timeStep) : 1;
        if (l.background || l.allDay || s.background || s.allDay || !o || !a) {
          let d, r;
          (d = (D[l._eid] || { overlaps: [] }).overlaps.indexOf(s._eid)) > -1 && D[l._eid].overlaps.splice(d, 1), (r = (D[s._eid] || { overlaps: [] }).overlaps.indexOf(l._eid)) > -1 && D[s._eid].overlaps.splice(r, 1), D[s._eid].position--;
        } else
          D[l._eid].overlaps.push(s._eid), D[l._eid].overlaps = [...new Set(D[l._eid].overlaps)], D[s._eid].overlaps.push(l._eid), D[s._eid].overlaps = [...new Set(D[s._eid].overlaps)], D[s._eid].position++;
      });
    });
    let n = 0;
    for (const l in D) {
      const s = D[l], o = s.overlaps.map((a) => ({ id: a, start: D[a].start }));
      o.push({ id: l, start: s.start }), o.sort((a, d) => a.start < d.start ? -1 : a.start > d.start ? 1 : a.id > d.id ? -1 : 1), s.position = o.findIndex((a) => a.id === l), n = Math.max(this.getOverlapsStreak(s, D), n);
    }
    return [D, n];
  }
  getOverlapsStreak(t, i = {}) {
    let n = t.overlaps.length + 1, l = [];
    return t.overlaps.forEach((s) => {
      l.includes(s) || t.overlaps.filter((o) => o !== s).forEach((o) => {
        i[o].overlaps.includes(s) || l.push(o);
      });
    }), l = [...new Set(l)], n -= l.length, n;
  }
  eventInRange(t, i, n) {
    if (t.allDay || !this._vuecal.time) {
      const o = new Date(t.start).setHours(0, 0, 0, 0);
      return new Date(t.end).setHours(23, 59, 0, 0) >= new Date(i).setHours(0, 0, 0, 0) && o <= new Date(n).setHours(0, 0, 0, 0);
    }
    const l = t.start.getTime(), s = t.end.getTime();
    return l < n.getTime() && s > i.getTime();
  }
};
var he = { class: "vuecal__flex vuecal__weekdays-headings" };
var ce = ["onClick"];
var ve = { class: "vuecal__flex weekday-label", grow: "" };
var me = { class: "full" };
var pe = { class: "small" };
var we = { class: "xsmall" };
var ye = { key: 0 };
var De = { key: 0, class: "vuecal__flex vuecal__split-days-headers", grow: "" };
var B = (e, t) => {
  const i = e.__vccOpts || e;
  for (const [n, l] of t)
    i[n] = l;
  return i;
};
var ie = B({ inject: ["vuecal", "utils", "view"], props: { transitionDirection: { type: String, default: "right" }, weekDays: { type: Array, default: () => [] }, switchToNarrowerView: { type: Function, default: () => {
} } }, methods: { selectCell(e, t) {
  e.getTime() !== this.view.selectedDate.getTime() && (this.view.selectedDate = e), this.utils.cell.selectCell(false, e, t);
}, cleanupHeading: (e) => ({ label: e.full, date: e.date, ...e.today ? { today: e.today } : {} }) }, computed: { headings() {
  if (!["month", "week"].includes(this.view.id))
    return [];
  let e = false;
  return this.weekDays.map((t, i) => {
    const n = this.utils.date.addDays(this.view.startDate, this.vuecal.startWeekOnSunday ? i - 1 : i);
    return { hide: t.hide, full: t.label, small: t.short || t.label.substr(0, 3), xsmall: t.short || t.label.substr(0, 1), ...this.view.id === "week" ? { dayOfMonth: n.getDate(), date: n, today: !e && this.utils.date.isToday(n) && !e++ } : {} };
  });
}, cellWidth() {
  return 100 / (7 - this.weekDays.reduce((e, t) => e + t.hide, 0));
}, weekdayCellStyles() {
  return { ...this.vuecal.hideWeekdays.length ? { width: `${this.cellWidth}%` } : {} };
}, cellHeadingsClickable() {
  return this.view.id === "week" && (this.vuecal.clickToNavigate || this.vuecal.dblclickToNavigate);
} } }, [["render", function(e, t, i, n, l, s) {
  return openBlock(), createElementBlock("div", he, [(openBlock(true), createElementBlock(Fragment, null, renderList(s.headings, (o, a) => (openBlock(), createElementBlock(Fragment, { key: a }, [o.hide ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(["vuecal__flex vuecal__heading", { today: o.today, clickable: s.cellHeadingsClickable }]), style: normalizeStyle(s.weekdayCellStyles), onClick: (d) => s.view.id === "week" && s.selectCell(o.date, d), onDblclick: t[0] || (t[0] = (d) => s.view.id === "week" && s.vuecal.dblclickToNavigate && i.switchToNarrowerView()) }, [createVNode(Transition, { name: `slide-fade--${i.transitionDirection}`, appear: s.vuecal.transitions }, { default: withCtx(() => [(openBlock(), createElementBlock("div", { class: "vuecal__flex", column: "", key: !!s.vuecal.transitions && `${a}-${o.dayOfMonth}` }, [createBaseVNode("div", ve, [renderSlot(e.$slots, "weekday-heading", { heading: s.cleanupHeading(o), view: s.view }, () => [createBaseVNode("span", me, toDisplayString(o.full), 1), createBaseVNode("span", pe, toDisplayString(o.small), 1), createBaseVNode("span", we, toDisplayString(o.xsmall), 1), o.dayOfMonth ? (openBlock(), createElementBlock("span", ye, " " + toDisplayString(o.dayOfMonth), 1)) : createCommentVNode("", true)])]), s.vuecal.hasSplits && s.vuecal.stickySplitLabels ? (openBlock(), createElementBlock("div", De, [(openBlock(true), createElementBlock(Fragment, null, renderList(s.vuecal.daySplits, (d, r) => (openBlock(), createElementBlock("div", { class: normalizeClass(["day-split-header", d.class || false]), key: r }, [renderSlot(e.$slots, "split-label", { split: d, view: s.view }, () => [createTextVNode(toDisplayString(d.label), 1)])], 2))), 128))])) : createCommentVNode("", true)]))]), _: 2 }, 1032, ["name", "appear"])], 46, ce))], 64))), 128))]);
}]]);
var ge = { class: "vuecal__header" };
var fe = { key: 0, class: "vuecal__flex vuecal__menu", role: "tablist", "aria-label": "Calendar views navigation" };
var _e = ["onDragenter", "onDragleave", "onClick", "aria-label"];
var ke = { key: 1, class: "vuecal__title-bar" };
var be = ["aria-label"];
var Te = { class: "vuecal__flex vuecal__title", grow: "" };
var Ee = ["aria-label"];
var Ce = { key: 0, class: "vuecal__flex vuecal__split-days-headers" };
var Me = B({ inject: ["vuecal", "previous", "next", "switchView", "updateSelectedDate", "modules", "view"], components: { WeekdaysHeadings: ie }, props: { options: { type: Object, default: () => ({}) }, editEvents: { type: Object, required: true }, hasSplits: { type: [Boolean, Number], default: false }, daySplits: { type: Array, default: () => [] }, viewProps: { type: Object, default: () => ({}) }, weekDays: { type: Array, default: () => [] }, switchToNarrowerView: { type: Function, default: () => {
} } }, data: () => ({ highlightedControl: null }), methods: { goToToday() {
  this.updateSelectedDate(new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0)));
}, switchToBroaderView() {
  this.transitionDirection = "left", this.broaderView && this.switchView(this.broaderView);
} }, computed: { transitionDirection: { get() {
  return this.vuecal.transitionDirection;
}, set(e) {
  this.vuecal.transitionDirection = e;
} }, broaderView() {
  const { enabledViews: e } = this.vuecal;
  return e[e.indexOf(this.view.id) - 1];
}, showDaySplits() {
  return this.view.id === "day" && this.hasSplits && this.options.stickySplitLabels && !this.options.minSplitWidth;
}, dnd() {
  return this.modules.dnd;
} } }, [["render", function(e, t, i, n, l, s) {
  const o = resolveComponent("weekdays-headings");
  return openBlock(), createElementBlock("div", ge, [i.options.hideViewSelector ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", fe, [(openBlock(true), createElementBlock(Fragment, null, renderList(i.viewProps.views, (a, d) => (openBlock(), createElementBlock(Fragment, { key: d }, [a.enabled ? (openBlock(), createElementBlock("button", { key: 0, class: normalizeClass(["vuecal__view-btn", { "vuecal__view-btn--active": s.view.id === d, "vuecal__view-btn--highlighted": e.highlightedControl === d }]), type: "button", onDragenter: (r) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragEnter(r, d, e.$data), onDragleave: (r) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragLeave(r, d, e.$data), onClick: (r) => s.switchView(d, null, true), "aria-label": `${a.label} view` }, toDisplayString(a.label), 43, _e)) : createCommentVNode("", true)], 64))), 128))])), i.options.hideTitleBar ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", ke, [createBaseVNode("button", { class: normalizeClass(["vuecal__arrow vuecal__arrow--prev", { "vuecal__arrow--highlighted": e.highlightedControl === "previous" }]), type: "button", onClick: t[0] || (t[0] = (...a) => s.previous && s.previous(...a)), onDragenter: t[1] || (t[1] = (a) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragEnter(a, "previous", e.$data)), onDragleave: t[2] || (t[2] = (a) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragLeave(a, "previous", e.$data)), "aria-label": `Previous ${s.view.id}` }, [renderSlot(e.$slots, "arrow-prev")], 42, be), createBaseVNode("div", Te, [createVNode(Transition, { name: i.options.transitions ? `slide-fade--${s.transitionDirection}` : "" }, { default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(s.broaderView ? "button" : "span"), { type: !!s.broaderView && "button", key: `${s.view.id}${s.view.startDate.toString()}`, onClick: t[3] || (t[3] = (a) => !!s.broaderView && s.switchToBroaderView()), "aria-label": !!s.broaderView && `Go to ${s.broaderView} view` }, { default: withCtx(() => [renderSlot(e.$slots, "title")]), _: 3 }, 8, ["type", "aria-label"]))]), _: 3 }, 8, ["name"])]), i.options.todayButton ? (openBlock(), createElementBlock("button", { key: 0, class: normalizeClass(["vuecal__today-btn", { "vuecal__today-btn--highlighted": e.highlightedControl === "today" }]), type: "button", onClick: t[4] || (t[4] = (...a) => s.goToToday && s.goToToday(...a)), onDragenter: t[5] || (t[5] = (a) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragEnter(a, "today", e.$data)), onDragleave: t[6] || (t[6] = (a) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragLeave(a, "today", e.$data)), "aria-label": "Today" }, [renderSlot(e.$slots, "today-button")], 34)) : createCommentVNode("", true), createBaseVNode("button", { class: normalizeClass(["vuecal__arrow vuecal__arrow--next", { "vuecal__arrow--highlighted": e.highlightedControl === "next" }]), type: "button", onClick: t[7] || (t[7] = (...a) => s.next && s.next(...a)), onDragenter: t[8] || (t[8] = (a) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragEnter(a, "next", e.$data)), onDragleave: t[9] || (t[9] = (a) => i.editEvents.drag && s.dnd && s.dnd.viewSelectorDragLeave(a, "next", e.$data)), "aria-label": `Next ${s.view.id}` }, [renderSlot(e.$slots, "arrow-next")], 42, Ee)])), i.viewProps.weekDaysInHeader ? (openBlock(), createBlock(o, { key: 2, "week-days": i.weekDays, "transition-direction": s.transitionDirection, "switch-to-narrower-view": i.switchToNarrowerView }, createSlots({ _: 2 }, [e.$slots["weekday-heading"] ? { name: "weekday-heading", fn: withCtx(({ heading: a, view: d }) => [renderSlot(e.$slots, "weekday-heading", { heading: a, view: d })]), key: "0" } : void 0, e.$slots["split-label"] ? { name: "split-label", fn: withCtx(({ split: a }) => [renderSlot(e.$slots, "split-label", { split: a, view: s.view })]), key: "1" } : void 0]), 1032, ["week-days", "transition-direction", "switch-to-narrower-view"])) : createCommentVNode("", true), createVNode(Transition, { name: `slide-fade--${s.transitionDirection}` }, { default: withCtx(() => [s.showDaySplits ? (openBlock(), createElementBlock("div", Ce, [(openBlock(true), createElementBlock(Fragment, null, renderList(i.daySplits, (a, d) => (openBlock(), createElementBlock("div", { class: normalizeClass(["day-split-header", a.class || false]), key: d }, [renderSlot(e.$slots, "split-label", { split: a, view: s.view.id }, () => [createTextVNode(toDisplayString(a.label), 1)])], 2))), 128))])) : createCommentVNode("", true)]), _: 3 }, 8, ["name"])]);
}]]);
var Se = ["draggable"];
var Oe = { inject: ["vuecal", "utils", "modules", "view", "domEvents", "editEvents"], props: { cellFormattedDate: { type: String, default: "" }, event: { type: Object, default: () => ({}) }, cellEvents: { type: Array, default: () => [] }, overlaps: { type: Array, default: () => [] }, eventPosition: { type: Number, default: 0 }, overlapsStreak: { type: Number, default: 0 }, allDay: { type: Boolean, default: false } }, data: () => ({ touch: { dragThreshold: 30, startX: 0, startY: 0, dragged: false } }), methods: { onMouseDown(e, t = false) {
  if ("ontouchstart" in window && !t)
    return false;
  const { clickHoldAnEvent: i, focusAnEvent: n, resizeAnEvent: l, dragAnEvent: s } = this.domEvents;
  if (n._eid === this.event._eid && i._eid === this.event._eid)
    return true;
  this.focusEvent(), i._eid = null, this.vuecal.editEvents.delete && this.event.deletable && (i.timeoutId = setTimeout(() => {
    l._eid || s._eid || (i._eid = this.event._eid, this.event.deleting = true);
  }, i.timeout));
}, onMouseUp(e) {
  this.domEvents.focusAnEvent._eid !== this.event._eid || this.touch.dragged || (this.domEvents.focusAnEvent.mousedUp = true), this.touch.dragged = false;
}, onMouseEnter(e) {
  e.preventDefault(), this.vuecal.emitWithEvent("event-mouse-enter", this.event);
}, onMouseLeave(e) {
  e.preventDefault(), this.vuecal.emitWithEvent("event-mouse-leave", this.event);
}, onTouchMove(e) {
  if (typeof this.vuecal.onEventClick != "function")
    return;
  const { clientX: t, clientY: i } = e.touches[0], { startX: n, startY: l, dragThreshold: s } = this.touch;
  (Math.abs(t - n) > s || Math.abs(i - l) > s) && (this.touch.dragged = true);
}, onTouchStart(e) {
  this.touch.startX = e.touches[0].clientX, this.touch.startY = e.touches[0].clientY, this.onMouseDown(e, true);
}, onEnterKeypress(e) {
  if (typeof this.vuecal.onEventClick == "function")
    return this.vuecal.onEventClick(this.event, e);
}, onDblClick(e) {
  if (typeof this.vuecal.onEventDblclick == "function")
    return this.vuecal.onEventDblclick(this.event, e);
}, onDragStart(e) {
  this.dnd && this.dnd.eventDragStart(e, this.event);
}, onDragEnd() {
  this.dnd && this.dnd.eventDragEnd(this.event);
}, onResizeHandleMouseDown() {
  this.focusEvent(), this.domEvents.dragAnEvent._eid = null, this.domEvents.resizeAnEvent = Object.assign(this.domEvents.resizeAnEvent, { _eid: this.event._eid, start: (this.segment || this.event).start, split: this.event.split || null, segment: !!this.segment && this.utils.date.formatDateLite(this.segment.start), originalEnd: new Date((this.segment || this.event).end), originalEndTimeMinutes: this.event.endTimeMinutes }), this.event.resizing = true;
}, deleteEvent(e = false) {
  if ("ontouchstart" in window && !e)
    return false;
  this.utils.event.deleteAnEvent(this.event);
}, touchDeleteEvent(e) {
  this.deleteEvent(true);
}, cancelDeleteEvent() {
  this.event.deleting = false;
}, focusEvent() {
  const { focusAnEvent: e } = this.domEvents, t = e._eid;
  if (t !== this.event._eid) {
    if (t) {
      const i = this.view.events.find((n) => n._eid === t);
      i && (i.focused = false);
    }
    this.vuecal.cancelDelete(), this.vuecal.emitWithEvent("event-focus", this.event), e._eid = this.event._eid, this.event.focused = true;
  }
} }, computed: { eventDimensions() {
  const { startTimeMinutes: e, endTimeMinutes: t } = this.segment || this.event;
  let i = e - this.vuecal.timeFrom;
  const n = Math.max(Math.round(i * this.vuecal.timeCellHeight / this.vuecal.timeStep), 0);
  i = Math.min(t, this.vuecal.timeTo) - this.vuecal.timeFrom;
  const l = Math.round(i * this.vuecal.timeCellHeight / this.vuecal.timeStep);
  return { top: n, height: Math.max(l - n, 5) };
}, eventStyles() {
  if (this.event.allDay || !this.vuecal.time || !this.event.endTimeMinutes || this.view.id === "month" || this.allDay)
    return {};
  let e = 100 / Math.min(this.overlaps.length + 1, this.overlapsStreak), t = 100 / (this.overlaps.length + 1) * this.eventPosition;
  this.vuecal.minEventWidth && e < this.vuecal.minEventWidth && (e = this.vuecal.minEventWidth, t = (100 - this.vuecal.minEventWidth) / this.overlaps.length * this.eventPosition);
  const { top: i, height: n } = this.eventDimensions;
  return { top: `${i}px`, height: `${n}px`, width: `${e}%`, left: this.event.left && `${this.event.left}px` || `${t}%` };
}, eventClasses() {
  const { isFirstDay: e, isLastDay: t } = this.segment || {};
  return { [this.event.class]: !!this.event.class, "vuecal__event--focus": this.event.focused, "vuecal__event--resizing": this.event.resizing, "vuecal__event--background": this.event.background, "vuecal__event--deletable": this.event.deleting, "vuecal__event--all-day": this.event.allDay, "vuecal__event--dragging": !this.event.draggingStatic && this.event.dragging, "vuecal__event--static": this.event.dragging && this.event.draggingStatic, "vuecal__event--multiple-days": !!this.segment, "event-start": this.segment && e && !t, "event-middle": this.segment && !e && !t, "event-end": this.segment && t && !e };
}, segment() {
  return this.event.segments && this.event.segments[this.cellFormattedDate] || null;
}, draggable() {
  const { draggable: e, background: t, daysCount: i } = this.event;
  return this.vuecal.editEvents.drag && e && !t && i === 1;
}, resizable() {
  const { editEvents: e, time: t } = this.vuecal;
  return e.resize && this.event.resizable && t && !this.allDay && (!this.segment || this.segment && this.segment.isLastDay) && this.view.id !== "month";
}, dnd() {
  return this.modules.dnd;
} } };
var $e = ["data-split", "aria-label", "onTouchstart", "onMousedown", "onDragover", "onDrop"];
var xe = { key: 0, class: "cell-time-labels" };
var We = ["innerHTML"];
var He = { key: 2, class: "vuecal__cell-events" };
var Ve = ["title"];
var se = B({ inject: ["vuecal", "utils", "modules", "view", "domEvents"], components: { Event: B(Oe, [["render", function(e, t, i, n, l, s) {
  return openBlock(), createElementBlock("div", { class: normalizeClass(["vuecal__event", s.eventClasses]), style: normalizeStyle(s.eventStyles), tabindex: "0", onFocus: t[4] || (t[4] = (...o) => s.focusEvent && s.focusEvent(...o)), onKeypress: t[5] || (t[5] = withKeys(withModifiers((...o) => s.onEnterKeypress && s.onEnterKeypress(...o), ["stop"]), ["enter"])), onMouseenter: t[6] || (t[6] = (...o) => s.onMouseEnter && s.onMouseEnter(...o)), onMouseleave: t[7] || (t[7] = (...o) => s.onMouseLeave && s.onMouseLeave(...o)), onTouchstart: t[8] || (t[8] = withModifiers((...o) => s.onTouchStart && s.onTouchStart(...o), ["stop"])), onMousedown: t[9] || (t[9] = (o) => s.onMouseDown(o)), onMouseup: t[10] || (t[10] = (...o) => s.onMouseUp && s.onMouseUp(...o)), onTouchend: t[11] || (t[11] = (...o) => s.onMouseUp && s.onMouseUp(...o)), onTouchmove: t[12] || (t[12] = (...o) => s.onTouchMove && s.onTouchMove(...o)), onDblclick: t[13] || (t[13] = (...o) => s.onDblClick && s.onDblClick(...o)), draggable: s.draggable, onDragstart: t[14] || (t[14] = (o) => s.draggable && s.onDragStart(o)), onDragend: t[15] || (t[15] = (o) => s.draggable && s.onDragEnd()) }, [s.vuecal.editEvents.delete && i.event.deletable ? (openBlock(), createElementBlock("div", { key: 0, class: "vuecal__event-delete", onClick: t[0] || (t[0] = withModifiers((...o) => s.deleteEvent && s.deleteEvent(...o), ["stop"])), onTouchstart: t[1] || (t[1] = withModifiers((...o) => s.touchDeleteEvent && s.touchDeleteEvent(...o), ["stop"])) }, toDisplayString(s.vuecal.texts.deleteEvent), 33)) : createCommentVNode("", true), renderSlot(e.$slots, "event", { event: i.event, view: s.view.id }), s.resizable ? (openBlock(), createElementBlock("div", { key: 1, class: "vuecal__event-resize-handle", contenteditable: "false", onMousedown: t[2] || (t[2] = withModifiers((...o) => s.onResizeHandleMouseDown && s.onResizeHandleMouseDown(...o), ["stop", "prevent"])), onTouchstart: t[3] || (t[3] = withModifiers((...o) => s.onResizeHandleMouseDown && s.onResizeHandleMouseDown(...o), ["stop", "prevent"])) }, null, 32)) : createCommentVNode("", true)], 46, Se);
}]]) }, props: { options: { type: Object, default: () => ({}) }, editEvents: { type: Object, required: true }, data: { type: Object, required: true }, cellSplits: { type: Array, default: () => [] }, minTimestamp: { type: [Number, null], default: null }, maxTimestamp: { type: [Number, null], default: null }, cellWidth: { type: [Number, Boolean], default: false }, allDay: { type: Boolean, default: false } }, data: () => ({ cellOverlaps: {}, cellOverlapsStreak: 1, timeAtCursor: null, highlighted: false, highlightedSplit: null }), methods: { getSplitAtCursor({ target: e }) {
  let t = e.classList.contains("vuecal__cell-split") ? e : this.vuecal.findAncestor(e, "vuecal__cell-split");
  return t && (t = t.attributes["data-split"].value, parseInt(t).toString() === t.toString() && (t = parseInt(t))), t || null;
}, splitClasses(e) {
  return { "vuecal__cell-split": true, "vuecal__cell-split--highlighted": this.highlightedSplit === e.id, [e.class]: !!e.class };
}, checkCellOverlappingEvents() {
  this.options.time && this.eventsCount && !this.splitsCount && (this.eventsCount === 1 ? (this.cellOverlaps = [], this.cellOverlapsStreak = 1) : [this.cellOverlaps, this.cellOverlapsStreak] = this.utils.event.checkCellOverlappingEvents(this.events, this.options));
}, isDOMElementAnEvent(e) {
  return this.vuecal.isDOMElementAnEvent(e);
}, selectCell(e, t = false) {
  const i = this.splitsCount ? this.getSplitAtCursor(e) : null;
  this.utils.cell.selectCell(t, this.timeAtCursor, i), this.timeAtCursor = null;
}, onCellkeyPressEnter(e) {
  this.isSelected || this.onCellFocus(e);
  const t = this.splitsCount ? this.getSplitAtCursor(e) : null;
  this.utils.cell.keyPressEnterCell(this.timeAtCursor, t), this.timeAtCursor = null;
}, onCellFocus(e) {
  if (!this.isSelected && !this.isDisabled) {
    this.isSelected = this.data.startDate;
    const t = this.splitsCount ? this.getSplitAtCursor(e) : null, i = this.timeAtCursor || this.data.startDate;
    this.vuecal.$emit("cell-focus", t ? { date: i, split: t } : i);
  }
}, onCellMouseDown(e, t = null, i = false) {
  if ("ontouchstart" in window && !i)
    return false;
  this.isSelected || this.onCellFocus(e);
  const { clickHoldACell: n, focusAnEvent: l } = this.domEvents;
  this.domEvents.cancelClickEventCreation = false, n.eventCreated = false, this.timeAtCursor = new Date(this.data.startDate);
  const { minutes: s, cursorCoords: { y: o } } = this.vuecal.minutesAtCursor(e);
  this.timeAtCursor.setMinutes(s);
  const a = this.isDOMElementAnEvent(e.target);
  !a && l._eid && ((this.view.events.find((d) => d._eid === l._eid) || {}).focused = false), this.editEvents.create && !a && this.setUpEventCreation(e, o);
}, setUpEventCreation(e, t) {
  if (this.options.dragToCreateEvent && ["week", "day"].includes(this.view.id)) {
    const { dragCreateAnEvent: i } = this.domEvents;
    if (i.startCursorY = t, i.split = this.splitsCount ? this.getSplitAtCursor(e) : null, i.start = this.timeAtCursor, this.options.snapToTime) {
      let n = 60 * this.timeAtCursor.getHours() + this.timeAtCursor.getMinutes();
      const l = n + this.options.snapToTime / 2;
      n = l - l % this.options.snapToTime, i.start.setHours(0, n, 0, 0);
    }
  } else
    this.options.cellClickHold && ["month", "week", "day"].includes(this.view.id) && this.setUpCellHoldTimer(e);
}, setUpCellHoldTimer(e) {
  const { clickHoldACell: t } = this.domEvents;
  t.cellId = `${this.vuecal._.uid}_${this.data.formattedDate}`, t.split = this.splitsCount ? this.getSplitAtCursor(e) : null, t.timeoutId = setTimeout(() => {
    if (t.cellId && !this.domEvents.cancelClickEventCreation) {
      const { _eid: i } = this.utils.event.createAnEvent(this.timeAtCursor, null, t.split ? { split: t.split } : {});
      t.eventCreated = i;
    }
  }, t.timeout);
}, onCellTouchStart(e, t = null) {
  this.onCellMouseDown(e, t, true);
}, onCellClick(e) {
  this.isDOMElementAnEvent(e.target) || this.selectCell(e);
}, onCellDblClick(e) {
  const t = new Date(this.data.startDate);
  t.setMinutes(this.vuecal.minutesAtCursor(e).minutes);
  const i = this.splitsCount ? this.getSplitAtCursor(e) : null;
  this.vuecal.$emit("cell-dblclick", i ? { date: t, split: i } : t), this.options.dblclickToNavigate && this.vuecal.switchToNarrowerView();
}, onCellContextMenu(e) {
  e.stopPropagation(), e.preventDefault();
  const t = new Date(this.data.startDate), { cursorCoords: i, minutes: n } = this.vuecal.minutesAtCursor(e);
  t.setMinutes(n);
  const l = this.splitsCount ? this.getSplitAtCursor(e) : null;
  this.vuecal.$emit("cell-contextmenu", { date: t, ...i, ...l || {}, e });
} }, computed: { dnd() {
  return this.modules.dnd;
}, nowInMinutes() {
  return this.utils.date.dateToMinutes(this.vuecal.now);
}, isBeforeMinDate() {
  return this.minTimestamp !== null && this.minTimestamp > this.data.endDate.getTime();
}, isAfterMaxDate() {
  return this.maxTimestamp && this.maxTimestamp < this.data.startDate.getTime();
}, isDisabled() {
  const { disableDays: e } = this.options, { isYearsOrYearView: t } = this.vuecal;
  return !(!e.length || !e.includes(this.data.formattedDate) || t) || this.isBeforeMinDate || this.isAfterMaxDate;
}, isSelected: { get() {
  let e = false;
  const { selectedDate: t } = this.view;
  return e = this.view.id === "years" ? t.getFullYear() === this.data.startDate.getFullYear() : this.view.id === "year" ? t.getFullYear() === this.data.startDate.getFullYear() && t.getMonth() === this.data.startDate.getMonth() : t.getTime() === this.data.startDate.getTime(), e;
}, set(e) {
  this.view.selectedDate = e, this.vuecal.$emit("update:selected-date", this.view.selectedDate);
} }, isWeekOrDayView() {
  return ["week", "day"].includes(this.view.id);
}, transitionDirection() {
  return this.vuecal.transitionDirection;
}, specialHours() {
  return this.data.specialHours.map((e) => {
    let { from: t, to: i } = e;
    return t = Math.max(t, this.options.timeFrom), i = Math.min(i, this.options.timeTo), { ...e, height: (i - t) * this.timeScale, top: (t - this.options.timeFrom) * this.timeScale };
  });
}, events() {
  const { startDate: e, endDate: t } = this.data;
  let i = [];
  if (!["years", "year"].includes(this.view.id) || this.options.eventsCountOnYearView) {
    if (i = this.view.events.slice(0), this.view.id === "month" && i.push(...this.view.outOfScopeEvents), i = i.filter((n) => this.utils.event.eventInRange(n, e, t)), this.options.showAllDayEvents && this.view.id !== "month" && (i = i.filter((n) => !!n.allDay === this.allDay)), this.options.time && this.isWeekOrDayView && !this.allDay) {
      const { timeFrom: n, timeTo: l } = this.options;
      i = i.filter((s) => {
        const o = s.daysCount > 1 && s.segments[this.data.formattedDate] || {}, a = s.daysCount === 1 && s.startTimeMinutes < l && s.endTimeMinutes > n, d = s.daysCount > 1 && o.startTimeMinutes < l && o.endTimeMinutes > n;
        return s.allDay || a || d || false;
      });
    }
    !this.options.time || !this.isWeekOrDayView || this.options.showAllDayEvents && this.allDay || i.sort((n, l) => n.start < l.start ? -1 : 1), this.cellSplits.length || this.$nextTick(this.checkCellOverlappingEvents);
  }
  return i;
}, eventsCount() {
  return this.events.length;
}, splits() {
  return this.cellSplits.map((e, t) => {
    const i = this.events.filter((s) => s.split === e.id), [n, l] = this.utils.event.checkCellOverlappingEvents(i.filter((s) => !s.background && !s.allDay), this.options);
    return { ...e, overlaps: n, overlapsStreak: l, events: i };
  });
}, splitsCount() {
  return this.splits.length;
}, cellClasses() {
  return { [this.data.class]: !!this.data.class, "vuecal__cell--current": this.data.current, "vuecal__cell--today": this.data.today, "vuecal__cell--out-of-scope": this.data.outOfScope, "vuecal__cell--before-min": this.isDisabled && this.isBeforeMinDate, "vuecal__cell--after-max": this.isDisabled && this.isAfterMaxDate, "vuecal__cell--disabled": this.isDisabled, "vuecal__cell--selected": this.isSelected, "vuecal__cell--highlighted": this.highlighted, "vuecal__cell--has-splits": this.splitsCount, "vuecal__cell--has-events": this.eventsCount };
}, cellStyles() {
  return { ...this.cellWidth ? { width: `${this.cellWidth}%` } : {} };
}, timelineVisible() {
  const { time: e, timeTo: t } = this.options;
  return this.data.today && this.isWeekOrDayView && e && !this.allDay && this.nowInMinutes <= t;
}, todaysTimePosition() {
  if (!this.data.today || !this.options.time)
    return;
  const e = this.nowInMinutes - this.options.timeFrom;
  return Math.round(e * this.timeScale);
}, timeScale() {
  return this.options.timeCellHeight / this.options.timeStep;
} } }, [["render", function(e, t, i, n, l, s) {
  const o = resolveComponent("event");
  return openBlock(), createBlock(TransitionGroup, { class: normalizeClass(["vuecal__cell", s.cellClasses]), name: `slide-fade--${s.transitionDirection}`, tag: "div", appear: i.options.transitions, style: normalizeStyle(s.cellStyles) }, { default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(s.splitsCount ? s.splits : 1, (a, d) => (openBlock(), createElementBlock("div", { class: normalizeClass(["vuecal__flex vuecal__cell-content", s.splitsCount && s.splitClasses(a)]), key: i.options.transitions ? `${s.view.id}-${i.data.content}-${d}` : d, "data-split": !!s.splitsCount && a.id, column: "", tabindex: "0", "aria-label": i.data.content, onFocus: t[0] || (t[0] = (r) => s.onCellFocus(r)), onKeypress: t[1] || (t[1] = withKeys((r) => s.onCellkeyPressEnter(r), ["enter"])), onTouchstart: (r) => !s.isDisabled && s.onCellTouchStart(r, s.splitsCount ? a.id : null), onMousedown: (r) => !s.isDisabled && s.onCellMouseDown(r, s.splitsCount ? a.id : null), onClick: t[2] || (t[2] = (r) => !s.isDisabled && s.onCellClick(r)), onDblclick: t[3] || (t[3] = (r) => !s.isDisabled && s.onCellDblClick(r)), onContextmenu: t[4] || (t[4] = (r) => !s.isDisabled && i.options.cellContextmenu && s.onCellContextMenu(r)), onDragenter: t[5] || (t[5] = (r) => !s.isDisabled && i.editEvents.drag && s.dnd && s.dnd.cellDragEnter(r, e.$data, i.data.startDate)), onDragover: (r) => !s.isDisabled && i.editEvents.drag && s.dnd && s.dnd.cellDragOver(r, e.$data, i.data.startDate, s.splitsCount ? a.id : null), onDragleave: t[6] || (t[6] = (r) => !s.isDisabled && i.editEvents.drag && s.dnd && s.dnd.cellDragLeave(r, e.$data, i.data.startDate)), onDrop: (r) => !s.isDisabled && i.editEvents.drag && s.dnd && s.dnd.cellDragDrop(r, e.$data, i.data.startDate, s.splitsCount ? a.id : null) }, [i.options.showTimeInCells && i.options.time && s.isWeekOrDayView && !i.allDay ? (openBlock(), createElementBlock("div", xe, [(openBlock(true), createElementBlock(Fragment, null, renderList(s.vuecal.timeCells, (r, u) => (openBlock(), createElementBlock("span", { class: "cell-time-label", key: u }, toDisplayString(r.label), 1))), 128))])) : createCommentVNode("", true), s.isWeekOrDayView && !i.allDay && s.specialHours.length ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(s.specialHours, (r, u) => (openBlock(), createElementBlock("div", { class: normalizeClass(["vuecal__special-hours", `vuecal__special-hours--day${r.day} ${r.class}`]), style: normalizeStyle(`height: ${r.height}px;top: ${r.top}px`) }, [r.label ? (openBlock(), createElementBlock("div", { key: 0, class: "special-hours-label", innerHTML: r.label }, null, 8, We)) : createCommentVNode("", true)], 6))), 256)) : createCommentVNode("", true), renderSlot(e.$slots, "cell-content", { events: s.events, selectCell: (r) => s.selectCell(r, true), split: !!s.splitsCount && a }), s.eventsCount && (s.isWeekOrDayView || s.view.id === "month" && i.options.eventsOnMonthView) ? (openBlock(), createElementBlock("div", He, [(openBlock(true), createElementBlock(Fragment, null, renderList(s.splitsCount ? a.events : s.events, (r, u) => (openBlock(), createBlock(o, { key: u, "cell-formatted-date": i.data.formattedDate, event: r, "all-day": i.allDay, "cell-events": s.splitsCount ? a.events : s.events, overlaps: ((s.splitsCount ? a.overlaps[r._eid] : e.cellOverlaps[r._eid]) || []).overlaps, "event-position": ((s.splitsCount ? a.overlaps[r._eid] : e.cellOverlaps[r._eid]) || []).position, "overlaps-streak": s.splitsCount ? a.overlapsStreak : e.cellOverlapsStreak }, { event: withCtx(({ event: m, view: p }) => [renderSlot(e.$slots, "event", { view: p, event: m })]), _: 2 }, 1032, ["cell-formatted-date", "event", "all-day", "cell-events", "overlaps", "event-position", "overlaps-streak"]))), 128))])) : createCommentVNode("", true)], 42, $e))), 128)), s.timelineVisible ? (openBlock(), createElementBlock("div", { class: "vuecal__now-line", style: normalizeStyle(`top: ${s.todaysTimePosition}px`), key: i.options.transitions ? `${s.view.id}-now-line` : "now-line", title: s.utils.date.formatTime(s.vuecal.now) }, null, 12, Ve)) : createCommentVNode("", true)]), _: 3 }, 8, ["class", "name", "appear", "style"]);
}]]);
var Ae = { key: 0, class: "vuecal__all-day-text", style: { width: "3em" } };
var je = B({ inject: ["vuecal", "view", "editEvents"], components: { "vuecal-cell": se }, props: { options: { type: Object, required: true }, cells: { type: Array, required: true }, label: { type: String, required: true }, daySplits: { type: Array, default: () => [] }, shortEvents: { type: Boolean, default: true }, height: { type: String, default: "" }, cellOrSplitMinWidth: { type: Number, default: null } }, computed: { hasCellOrSplitWidth() {
  return !!(this.options.minCellWidth || this.daySplits.length && this.options.minSplitWidth);
} } }, [["render", function(e, t, i, n, l, s) {
  const o = resolveComponent("vuecal-cell");
  return openBlock(), createElementBlock("div", { class: "vuecal__flex vuecal__all-day", style: normalizeStyle(i.cellOrSplitMinWidth && { height: i.height }) }, [i.cellOrSplitMinWidth ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", Ae, [createBaseVNode("span", null, toDisplayString(i.label), 1)])), createBaseVNode("div", { class: normalizeClass(["vuecal__flex vuecal__cells", `${s.view.id}-view`]), grow: "", style: normalizeStyle(i.cellOrSplitMinWidth ? `min-width: ${i.cellOrSplitMinWidth}px` : "") }, [(openBlock(true), createElementBlock(Fragment, null, renderList(i.cells, (a, d) => (openBlock(), createBlock(o, { key: d, options: i.options, "edit-events": s.editEvents, data: a, "all-day": true, "cell-width": i.options.hideWeekdays.length && (s.vuecal.isWeekView || s.vuecal.isMonthView) && s.vuecal.cellWidth, "min-timestamp": i.options.minTimestamp, "max-timestamp": i.options.maxTimestamp, "cell-splits": i.daySplits }, { event: withCtx(({ event: r, view: u }) => [renderSlot(e.$slots, "event", { view: u, event: r })]), _: 2 }, 1032, ["options", "edit-events", "data", "cell-width", "min-timestamp", "max-timestamp", "cell-splits"]))), 128))], 6)], 4);
}]]);
var Ye = ["lang"];
var Le = createBaseVNode("i", { class: "angle" }, null, -1);
var Fe = createBaseVNode("i", { class: "angle" }, null, -1);
var Be = { class: "default" };
var Ne = { key: 0, class: "vuecal__flex vuecal__body", grow: "" };
var Ie = ["onBlur", "innerHTML"];
var ze = ["innerHTML"];
var Pe = ["innerHTML"];
var Ue = { class: "vuecal__flex", row: "", grow: "" };
var Re = { key: 0, class: "vuecal__time-column" };
var qe = createBaseVNode("span", { class: "vuecal__time-cell-line" }, null, -1);
var Ke = { class: "vuecal__time-cell-label" };
var Xe = { key: 1, class: "vuecal__flex vuecal__week-numbers", column: "" };
var Ge = ["wrap", "column"];
var Ze = ["onBlur", "innerHTML"];
var Je = ["innerHTML"];
var Qe = ["innerHTML"];
var et = ["wrap"];
var tt = ["innerHTML"];
var it = ["innerHTML"];
var st = { key: 2, class: "vuecal__cell-events-count" };
var nt = { key: 3, class: "vuecal__no-event" };
var at = ["onBlur", "innerHTML"];
var lt = ["innerHTML"];
var ot = { key: 2, class: "vuecal__event-time" };
var rt = { key: 0 };
var dt = { key: 1, class: "days-to-end" };
var ut = ["innerHTML"];
var ht = { key: 0, class: "vuecal__scrollbar-check" };
var ct = [createBaseVNode("div", null, null, -1)];
var z = { weekDays: Array(7).fill(""), weekDaysShort: [], months: Array(12).fill(""), years: "", year: "", month: "", week: "", day: "", today: "", noEvent: "", allDay: "", deleteEvent: "", createEvent: "", dateFormat: "dddd MMMM D, YYYY", am: "am", pm: "pm" };
var ee = ["years", "year", "month", "week", "day"];
var te = new class {
  constructor(e, t = false) {
    W(this, "texts", {});
    W(this, "dateToMinutes", (e2) => 60 * e2.getHours() + e2.getMinutes());
    O = this, this._texts = e, t || !Date || Date.prototype.addDays || this._initDatePrototypes();
  }
  _initDatePrototypes() {
    Date.prototype.addDays = function(e) {
      return O.addDays(this, e);
    }, Date.prototype.subtractDays = function(e) {
      return O.subtractDays(this, e);
    }, Date.prototype.addHours = function(e) {
      return O.addHours(this, e);
    }, Date.prototype.subtractHours = function(e) {
      return O.subtractHours(this, e);
    }, Date.prototype.addMinutes = function(e) {
      return O.addMinutes(this, e);
    }, Date.prototype.subtractMinutes = function(e) {
      return O.subtractMinutes(this, e);
    }, Date.prototype.getWeek = function() {
      return O.getWeek(this);
    }, Date.prototype.isToday = function() {
      return O.isToday(this);
    }, Date.prototype.isLeapYear = function() {
      return O.isLeapYear(this);
    }, Date.prototype.format = function(e = "YYYY-MM-DD") {
      return O.formatDate(this, e);
    }, Date.prototype.formatTime = function(e = "HH:mm") {
      return O.formatTime(this, e);
    };
  }
  removePrototypes() {
    delete Date.prototype.addDays, delete Date.prototype.subtractDays, delete Date.prototype.addHours, delete Date.prototype.subtractHours, delete Date.prototype.addMinutes, delete Date.prototype.subtractMinutes, delete Date.prototype.getWeek, delete Date.prototype.isToday, delete Date.prototype.isLeapYear, delete Date.prototype.format, delete Date.prototype.formatTime;
  }
  updateTexts(e) {
    this._texts = e;
  }
  _todayFormatted() {
    return J !== (/* @__PURE__ */ new Date()).getDate() && (N = /* @__PURE__ */ new Date(), J = N.getDate(), Q = `${N.getFullYear()}-${N.getMonth()}-${N.getDate()}`), Q;
  }
  addDays(e, t) {
    const i = new Date(e.valueOf());
    return i.setDate(i.getDate() + t), i;
  }
  subtractDays(e, t) {
    const i = new Date(e.valueOf());
    return i.setDate(i.getDate() - t), i;
  }
  addHours(e, t) {
    const i = new Date(e.valueOf());
    return i.setHours(i.getHours() + t), i;
  }
  subtractHours(e, t) {
    const i = new Date(e.valueOf());
    return i.setHours(i.getHours() - t), i;
  }
  addMinutes(e, t) {
    const i = new Date(e.valueOf());
    return i.setMinutes(i.getMinutes() + t), i;
  }
  subtractMinutes(e, t) {
    const i = new Date(e.valueOf());
    return i.setMinutes(i.getMinutes() - t), i;
  }
  getWeek(e) {
    const t = new Date(Date.UTC(e.getFullYear(), e.getMonth(), e.getDate())), i = t.getUTCDay() || 7;
    t.setUTCDate(t.getUTCDate() + 4 - i);
    const n = new Date(Date.UTC(t.getUTCFullYear(), 0, 1));
    return Math.ceil(((t - n) / 864e5 + 1) / 7);
  }
  isToday(e) {
    return `${e.getFullYear()}-${e.getMonth()}-${e.getDate()}` === this._todayFormatted();
  }
  isLeapYear(e) {
    const t = e.getFullYear();
    return !(t % 400) || t % 100 && !(t % 4);
  }
  getPreviousFirstDayOfWeek(e = null, t) {
    const i = e && new Date(e.valueOf()) || /* @__PURE__ */ new Date(), n = t ? 7 : 6;
    return i.setDate(i.getDate() - (i.getDay() + n) % 7), i;
  }
  stringToDate(e) {
    return e instanceof Date ? e : (e.length === 10 && (e += " 00:00"), new Date(e.replace(/-/g, "/")));
  }
  countDays(e, t) {
    typeof e == "string" && (e = e.replace(/-/g, "/")), typeof t == "string" && (t = t.replace(/-/g, "/")), e = new Date(e).setHours(0, 0, 0, 0), t = new Date(t).setHours(0, 0, 1, 0);
    const i = 60 * (new Date(t).getTimezoneOffset() - new Date(e).getTimezoneOffset()) * 1e3;
    return Math.ceil((t - e - i) / 864e5);
  }
  datesInSameTimeStep(e, t, i) {
    return Math.abs(e.getTime() - t.getTime()) <= 60 * i * 1e3;
  }
  formatDate(e, t = "YYYY-MM-DD", i = null) {
    if (i || (i = this._texts), t || (t = "YYYY-MM-DD"), t === "YYYY-MM-DD")
      return this.formatDateLite(e);
    I = {}, F = {};
    const n = { YYYY: () => this._hydrateDateObject(e, i).YYYY, YY: () => this._hydrateDateObject(e, i).YY(), M: () => this._hydrateDateObject(e, i).M, MM: () => this._hydrateDateObject(e, i).MM(), MMM: () => this._hydrateDateObject(e, i).MMM(), MMMM: () => this._hydrateDateObject(e, i).MMMM(), MMMMG: () => this._hydrateDateObject(e, i).MMMMG(), D: () => this._hydrateDateObject(e, i).D, DD: () => this._hydrateDateObject(e, i).DD(), S: () => this._hydrateDateObject(e, i).S(), d: () => this._hydrateDateObject(e, i).d, dd: () => this._hydrateDateObject(e, i).dd(), ddd: () => this._hydrateDateObject(e, i).ddd(), dddd: () => this._hydrateDateObject(e, i).dddd(), HH: () => this._hydrateTimeObject(e, i).HH, H: () => this._hydrateTimeObject(e, i).H, hh: () => this._hydrateTimeObject(e, i).hh, h: () => this._hydrateTimeObject(e, i).h, am: () => this._hydrateTimeObject(e, i).am, AM: () => this._hydrateTimeObject(e, i).AM, mm: () => this._hydrateTimeObject(e, i).mm, m: () => this._hydrateTimeObject(e, i).m };
    return t.replace(/(\{[a-zA-Z]+\}|[a-zA-Z]+)/g, (l, s) => {
      const o = n[s.replace(/\{|\}/g, "")];
      return o !== void 0 ? o() : s;
    });
  }
  formatDateLite(e) {
    const t = e.getMonth() + 1, i = e.getDate();
    return `${e.getFullYear()}-${t < 10 ? "0" : ""}${t}-${i < 10 ? "0" : ""}${i}`;
  }
  formatTime(e, t = "HH:mm", i = null, n = false) {
    let l = false;
    if (n) {
      const [a, d, r] = [e.getHours(), e.getMinutes(), e.getSeconds()];
      a + d + r === 141 && (l = true);
    }
    if (e instanceof Date && t === "HH:mm")
      return l ? "24:00" : this.formatTimeLite(e);
    F = {}, i || (i = this._texts);
    const s = this._hydrateTimeObject(e, i), o = t.replace(/(\{[a-zA-Z]+\}|[a-zA-Z]+)/g, (a, d) => {
      const r = s[d.replace(/\{|\}/g, "")];
      return r !== void 0 ? r : d;
    });
    return l ? o.replace("23:59", "24:00") : o;
  }
  formatTimeLite(e) {
    const t = e.getHours(), i = e.getMinutes();
    return `${(t < 10 ? "0" : "") + t}:${(i < 10 ? "0" : "") + i}`;
  }
  _nth(e) {
    if (e > 3 && e < 21)
      return "th";
    switch (e % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  }
  _hydrateDateObject(e, t) {
    if (I.D)
      return I;
    const i = e.getFullYear(), n = e.getMonth() + 1, l = e.getDate(), s = (e.getDay() - 1 + 7) % 7;
    return I = { YYYY: i, YY: () => i.toString().substring(2), M: n, MM: () => (n < 10 ? "0" : "") + n, MMM: () => t.months[n - 1].substring(0, 3), MMMM: () => t.months[n - 1], MMMMG: () => (t.monthsGenitive || t.months)[n - 1], D: l, DD: () => (l < 10 ? "0" : "") + l, S: () => this._nth(l), d: s + 1, dd: () => t.weekDays[s][0], ddd: () => t.weekDays[s].substr(0, 3), dddd: () => t.weekDays[s] }, I;
  }
  _hydrateTimeObject(e, t) {
    if (F.am)
      return F;
    let i, n;
    e instanceof Date ? (i = e.getHours(), n = e.getMinutes()) : (i = Math.floor(e / 60), n = Math.floor(e % 60));
    const l = i % 12 ? i % 12 : 12, s = (t || { am: "am", pm: "pm" })[i === 24 || i < 12 ? "am" : "pm"];
    return F = { H: i, h: l, HH: (i < 10 ? "0" : "") + i, hh: (l < 10 ? "0" : "") + l, am: s, AM: s.toUpperCase(), m: n, mm: (n < 10 ? "0" : "") + n }, F;
  }
}(z);
var vt = { name: "vue-cal", components: { "vuecal-cell": se, "vuecal-header": Me, WeekdaysHeadings: ie, AllDayBar: je }, provide() {
  return { vuecal: this, utils: this.utils, modules: this.modules, previous: this.previous, next: this.next, switchView: this.switchView, updateSelectedDate: this.updateSelectedDate, editEvents: this.editEvents, view: this.view, domEvents: this.domEvents };
}, props: { activeView: { type: String, default: "week" }, allDayBarHeight: { type: [String, Number], default: "25px" }, cellClickHold: { type: Boolean, default: true }, cellContextmenu: { type: Boolean, default: false }, clickToNavigate: { type: Boolean, default: false }, dblclickToNavigate: { type: Boolean, default: true }, disableDatePrototypes: { type: Boolean, default: false }, disableDays: { type: Array, default: () => [] }, disableViews: { type: Array, default: () => [] }, dragToCreateEvent: { type: Boolean, default: true }, dragToCreateThreshold: { type: Number, default: 15 }, editableEvents: { type: [Boolean, Object], default: false }, events: { type: Array, default: () => [] }, eventsCountOnYearView: { type: Boolean, default: false }, eventsOnMonthView: { type: [Boolean, String], default: false }, hideBody: { type: Boolean, default: false }, hideTitleBar: { type: Boolean, default: false }, hideViewSelector: { type: Boolean, default: false }, hideWeekdays: { type: Array, default: () => [] }, hideWeekends: { type: Boolean, default: false }, locale: { type: [String, Object], default: "en" }, maxDate: { type: [String, Date], default: "" }, minCellWidth: { type: Number, default: 0 }, minDate: { type: [String, Date], default: "" }, minEventWidth: { type: Number, default: 0 }, minSplitWidth: { type: Number, default: 0 }, onEventClick: { type: [Function, null], default: null }, onEventCreate: { type: [Function, null], default: null }, onEventDblclick: { type: [Function, null], default: null }, overlapsPerTimeStep: { type: Boolean, default: false }, resizeX: { type: Boolean, default: false }, selectedDate: { type: [String, Date], default: "" }, showAllDayEvents: { type: [Boolean, String], default: false }, showTimeInCells: { type: Boolean, default: false }, showWeekNumbers: { type: [Boolean, String], default: false }, snapToTime: { type: Number, default: 0 }, small: { type: Boolean, default: false }, specialHours: { type: Object, default: () => ({}) }, splitDays: { type: Array, default: () => [] }, startWeekOnSunday: { type: Boolean, default: false }, stickySplitLabels: { type: Boolean, default: false }, time: { type: Boolean, default: true }, timeCellHeight: { type: Number, default: 40 }, timeFormat: { type: String, default: "" }, timeFrom: { type: Number, default: 0 }, timeStep: { type: Number, default: 60 }, timeTo: { type: Number, default: 1440 }, todayButton: { type: Boolean, default: false }, transitions: { type: Boolean, default: true }, twelveHour: { type: Boolean, default: false }, watchRealTime: { type: Boolean, default: false }, xsmall: { type: Boolean, default: false } }, data() {
  return { ready: false, texts: { ...z }, utils: { date: !!this.disableDatePrototypes && te.removePrototypes() || te, cell: null, event: null }, modules: { dnd: null }, cellsEl: null, view: { id: "", title: "", startDate: null, endDate: null, firstCellDate: null, lastCellDate: null, selectedDate: null, events: [] }, eventIdIncrement: 1, now: /* @__PURE__ */ new Date(), timeTickerIds: [null, null], domEvents: { resizeAnEvent: { _eid: null, start: null, split: null, segment: null, originalEndTimeMinutes: 0, originalEnd: null, end: null, startCell: null, endCell: null }, dragAnEvent: { _eid: null }, dragCreateAnEvent: { startCursorY: null, start: null, split: null, event: null }, focusAnEvent: { _eid: null, mousedUp: false }, clickHoldAnEvent: { _eid: null, timeout: 1200, timeoutId: null }, dblTapACell: { taps: 0, timeout: 500 }, clickHoldACell: { cellId: null, split: null, timeout: 1200, timeoutId: null, eventCreated: false }, cancelClickEventCreation: false }, mutableEvents: [], transitionDirection: "right" };
}, methods: { async loadLocale(e) {
  if (typeof this.locale == "object")
    return this.texts = Object.assign({}, z, e), void this.utils.date.updateTexts(this.texts);
  if (this.locale === "en") {
    const t = await import("./en.es-YHAZMOTL.js");
    this.texts = Object.assign({}, z, t);
  } else
    ((t, i) => {
      const n = t[i];
      return n ? typeof n == "function" ? n() : Promise.resolve(n) : new Promise((l, s) => {
        (typeof queueMicrotask == "function" ? queueMicrotask : setTimeout)(s.bind(null, new Error("Unknown variable dynamic import: " + i)));
      });
    })(Object.assign({ "./i18n/ar.json": () => import("./ar.es-BGC2MQ2B.js"), "./i18n/bg.json": () => import("./bg.es-7XXV4V7J.js"), "./i18n/bn.json": () => import("./bn.es-3KN4QTWK.js"), "./i18n/bs.json": () => import("./bs.es-3JG4W7DF.js"), "./i18n/ca.json": () => import("./ca.es-J7WIZTHG.js"), "./i18n/cs.json": () => import("./cs.es-2K7667LQ.js"), "./i18n/da.json": () => import("./da.es-XJFCRGPJ.js"), "./i18n/de.json": () => import("./de.es-TNV6CQTE.js"), "./i18n/el.json": () => import("./el.es-4JZQ4B7Z.js"), "./i18n/en.json": () => import("./en.es-YHAZMOTL.js"), "./i18n/es.json": () => import("./es.es-E656T4ZO.js"), "./i18n/et.json": () => import("./et.es-DG7H75R7.js"), "./i18n/fa.json": () => import("./fa.es-APNOIVER.js"), "./i18n/fr.json": () => import("./fr.es-2G37BZPF.js"), "./i18n/he.json": () => import("./he.es-U3Q4UUGH.js"), "./i18n/hr.json": () => import("./hr.es-RNETNS27.js"), "./i18n/hu.json": () => import("./hu.es-WFG2HIMH.js"), "./i18n/id.json": () => import("./id.es-QNZLGBZA.js"), "./i18n/is.json": () => import("./is.es-KXU27I47.js"), "./i18n/it.json": () => import("./it.es-OKN6CKOG.js"), "./i18n/ja.json": () => import("./ja.es-FJW7KCFF.js"), "./i18n/ka.json": () => import("./ka.es-Q7IWOPIV.js"), "./i18n/ko.json": () => import("./ko.es-IIA2O6LD.js"), "./i18n/lt.json": () => import("./lt.es-KBOQFFBJ.js"), "./i18n/mn.json": () => import("./mn.es-DJAODXTX.js"), "./i18n/nl.json": () => import("./nl.es-OLLMMUY3.js"), "./i18n/no.json": () => import("./no.es-Z7OBTOA3.js"), "./i18n/pl.json": () => import("./pl.es-CDFJ7Q6V.js"), "./i18n/pt-br.json": () => import("./pt-br.es-7OEUWKO2.js"), "./i18n/ro.json": () => import("./ro.es-OG67XPHP.js"), "./i18n/ru.json": () => import("./ru.es-BMIIHC2H.js"), "./i18n/sk.json": () => import("./sk.es-NHHITVGM.js"), "./i18n/sl.json": () => import("./sl.es-JTEFEYVW.js"), "./i18n/sq.json": () => import("./sq.es-MSITJ6CS.js"), "./i18n/sr.json": () => import("./sr.es-WHJXMISR.js"), "./i18n/sv.json": () => import("./sv.es-6ZWMLPW6.js"), "./i18n/tr.json": () => import("./tr.es-226TIQSY.js"), "./i18n/uk.json": () => import("./uk.es-S36RXPIH.js"), "./i18n/vi.json": () => import("./vi.es-OP77AVQ2.js"), "./i18n/zh-cn.json": () => import("./zh-cn.es-S3ZIPW3S.js"), "./i18n/zh-hk.json": () => import("./zh-hk.es-QLFWBQWQ.js") }), `./i18n/${e}.json`).then((t) => {
      this.texts = Object.assign({}, z, t.default), this.utils.date.updateTexts(this.texts);
    });
}, loadDragAndDrop() {
  import("./drag-and-drop.es-SU2SKGHB.js").then((e) => {
    const { DragAndDrop: t } = e;
    this.modules.dnd = new t(this);
  }).catch(() => console.warn("Vue Cal: Missing drag & drop module."));
}, validateView(e) {
  return ee.includes(e) || (console.error(`Vue Cal: invalid active-view parameter provided: "${e}".
A valid view must be one of: ${ee.join(", ")}.`), e = "week"), this.enabledViews.includes(e) || (console.warn(`Vue Cal: the provided active-view "${e}" is disabled. Using the "${this.enabledViews[0]}" view instead.`), e = this.enabledViews[0]), e;
}, switchToNarrowerView(e = null) {
  this.transitionDirection = "right";
  const t = this.enabledViews[this.enabledViews.indexOf(this.view.id) + 1];
  t && this.switchView(t, e);
}, switchView(e, t = null, i = false) {
  e = this.validateView(e);
  const n = this.utils.date, l = this.view.startDate && this.view.startDate.getTime();
  if (this.transitions && i) {
    if (this.view.id === e)
      return;
    const a = this.enabledViews;
    this.transitionDirection = a.indexOf(this.view.id) > a.indexOf(e) ? "left" : "right";
  }
  const s = this.view.id;
  switch (this.view.events = [], this.view.id = e, this.view.firstCellDate = null, this.view.lastCellDate = null, t || (t = this.view.selectedDate || this.view.startDate), e) {
    case "years":
      this.view.startDate = new Date(25 * Math.floor(t.getFullYear() / 25) || 2e3, 0, 1), this.view.endDate = new Date(this.view.startDate.getFullYear() + 25, 0, 1), this.view.endDate.setSeconds(-1);
      break;
    case "year":
      this.view.startDate = new Date(t.getFullYear(), 0, 1), this.view.endDate = new Date(t.getFullYear() + 1, 0, 1), this.view.endDate.setSeconds(-1);
      break;
    case "month": {
      this.view.startDate = new Date(t.getFullYear(), t.getMonth(), 1), this.view.endDate = new Date(t.getFullYear(), t.getMonth() + 1, 1), this.view.endDate.setSeconds(-1);
      let a = new Date(this.view.startDate);
      if (a.getDay() !== (this.startWeekOnSunday ? 0 : 1) && (a = n.getPreviousFirstDayOfWeek(a, this.startWeekOnSunday)), this.view.firstCellDate = a, this.view.lastCellDate = n.addDays(a, 41), this.view.lastCellDate.setHours(23, 59, 59, 0), this.hideWeekends) {
        if ([0, 6].includes(this.view.firstCellDate.getDay())) {
          const d = this.view.firstCellDate.getDay() !== 6 || this.startWeekOnSunday ? 1 : 2;
          this.view.firstCellDate = n.addDays(this.view.firstCellDate, d);
        }
        if ([0, 6].includes(this.view.startDate.getDay())) {
          const d = this.view.startDate.getDay() === 6 ? 2 : 1;
          this.view.startDate = n.addDays(this.view.startDate, d);
        }
        if ([0, 6].includes(this.view.lastCellDate.getDay())) {
          const d = this.view.lastCellDate.getDay() !== 0 || this.startWeekOnSunday ? 1 : 2;
          this.view.lastCellDate = n.subtractDays(this.view.lastCellDate, d);
        }
        if ([0, 6].includes(this.view.endDate.getDay())) {
          const d = this.view.endDate.getDay() === 0 ? 2 : 1;
          this.view.endDate = n.subtractDays(this.view.endDate, d);
        }
      }
      break;
    }
    case "week": {
      t = n.getPreviousFirstDayOfWeek(t, this.startWeekOnSunday);
      const a = this.hideWeekends ? 5 : 7;
      this.view.startDate = this.hideWeekends && this.startWeekOnSunday ? n.addDays(t, 1) : t, this.view.startDate.setHours(0, 0, 0, 0), this.view.endDate = n.addDays(t, a), this.view.endDate.setSeconds(-1);
      break;
    }
    case "day":
      this.view.startDate = t, this.view.startDate.setHours(0, 0, 0, 0), this.view.endDate = new Date(t), this.view.endDate.setHours(23, 59, 59, 0);
  }
  this.addEventsToView();
  const o = this.view.startDate && this.view.startDate.getTime();
  if ((s !== e || o !== l) && (this.$emit("update:activeView", e), this.ready)) {
    const a = this.view.startDate, d = { view: e, startDate: a, endDate: this.view.endDate, ...this.isMonthView ? { firstCellDate: this.view.firstCellDate, lastCellDate: this.view.lastCellDate, outOfScopeEvents: this.view.outOfScopeEvents.map(this.cleanupEvent) } : {}, events: this.view.events.map(this.cleanupEvent), ...this.isWeekView ? { week: n.getWeek(this.startWeekOnSunday ? n.addDays(a, 1) : a) } : {} };
    this.$emit("view-change", d);
  }
}, previous() {
  this.previousNext(false);
}, next() {
  this.previousNext();
}, previousNext(e = true) {
  const t = this.utils.date;
  this.transitionDirection = e ? "right" : "left";
  const i = e ? 1 : -1;
  let n = null;
  const { startDate: l, id: s } = this.view;
  switch (s) {
    case "years":
      n = new Date(l.getFullYear() + 25 * i, 0, 1);
      break;
    case "year":
      n = new Date(l.getFullYear() + 1 * i, 1, 1);
      break;
    case "month":
      n = new Date(l.getFullYear(), l.getMonth() + 1 * i, 1);
      break;
    case "week":
      n = t[e ? "addDays" : "subtractDays"](t.getPreviousFirstDayOfWeek(l, this.startWeekOnSunday), 7);
      break;
    case "day":
      n = t[e ? "addDays" : "subtractDays"](l, 1);
      const o = n.getDay(), a = this.startWeekOnSunday ? o : (o || 7) - 1;
      if (this.weekDays[a].hide) {
        const d = this.weekDays.map((u, m) => ({ ...u, i: m }));
        let r = 0;
        e ? ([...d.slice(a), ...d].find((u) => (r++, !u.hide)).i, r--) : [...d, ...d.slice(0, a)].reverse().find((u) => (r++, !u.hide)).i, n = t[e ? "addDays" : "subtractDays"](n, r);
      }
  }
  n && this.switchView(s, n);
}, addEventsToView(e = []) {
  const t = this.utils.event, { startDate: i, endDate: n, firstCellDate: l, lastCellDate: s } = this.view;
  if (e.length || (this.view.events = []), !(e = e.length ? e : [...this.mutableEvents]) || this.isYearsOrYearView && !this.eventsCountOnYearView)
    return;
  let o = e.filter((a) => t.eventInRange(a, i, n));
  this.isYearsOrYearView || this.isMonthView && !this.eventsOnMonthView || (o = o.map((a) => a.daysCount > 1 ? t.createEventSegments(a, l || i, s || n) : a)), this.view.events.push(...o), this.isMonthView && (this.view.outOfScopeEvents = [], e.forEach((a) => {
    (t.eventInRange(a, l, i) || t.eventInRange(a, n, s)) && (this.view.events.some((d) => d._eid === a._eid) || this.view.outOfScopeEvents.push(a));
  }));
}, findAncestor(e, t) {
  for (; (e = e.parentElement) && !e.classList.contains(t); )
    ;
  return e;
}, isDOMElementAnEvent(e) {
  return e.classList.contains("vuecal__event") || this.findAncestor(e, "vuecal__event");
}, onMouseMove(e) {
  const { resizeAnEvent: t, dragAnEvent: i, dragCreateAnEvent: n } = this.domEvents;
  (t._eid !== null || i._eid !== null || n.start) && (e.preventDefault(), t._eid ? this.eventResizing(e) : this.dragToCreateEvent && n.start && this.eventDragCreation(e));
}, onMouseUp(e) {
  const { focusAnEvent: t, resizeAnEvent: i, clickHoldAnEvent: n, clickHoldACell: l, dragCreateAnEvent: s } = this.domEvents, { _eid: o } = n, { _eid: a } = i;
  let d = false;
  const { event: r, start: u } = s, m = this.isDOMElementAnEvent(e.target), p = t.mousedUp;
  if (t.mousedUp = false, m && (this.domEvents.cancelClickEventCreation = true), l.eventCreated)
    return;
  if (a) {
    const { originalEnd: _, originalEndTimeMinutes: x, endTimeMinutes: V } = i, C = this.view.events.find((Y) => Y._eid === i._eid);
    if (d = V && V !== x, C && C.end.getTime() !== _.getTime()) {
      const Y = this.mutableEvents.find((ne) => ne._eid === i._eid);
      Y.endTimeMinutes = C.endTimeMinutes, Y.end = C.end;
      const A = this.cleanupEvent(C), K = { ...this.cleanupEvent(C), end: _, endTimeMinutes: C.originalEndTimeMinutes };
      this.$emit("event-duration-change", { event: A, oldDate: i.originalEnd, originalEvent: K }), this.$emit("event-change", { event: A, originalEvent: K });
    }
    C && (C.resizing = false), i._eid = null, i.start = null, i.split = null, i.segment = null, i.originalEndTimeMinutes = null, i.originalEnd = null, i.endTimeMinutes = null, i.startCell = null, i.endCell = null;
  } else
    u && (r && (this.emitWithEvent("event-drag-create", r), s.event.resizing = false), s.start = null, s.split = null, s.event = null);
  m || a || this.unfocusEvent(), n.timeoutId && !o && (clearTimeout(n.timeoutId), n.timeoutId = null), l.timeoutId && (clearTimeout(l.timeoutId), l.timeoutId = null);
  const E = typeof this.onEventClick == "function";
  if (p && !d && !o && !r && E) {
    let _ = this.view.events.find((x) => x._eid === t._eid);
    return !_ && this.isMonthView && (_ = this.view.outOfScopeEvents.find((x) => x._eid === t._eid)), _ && this.onEventClick(_, e);
  }
}, onKeyUp(e) {
  e.keyCode === 27 && this.cancelDelete();
}, eventResizing(e) {
  const { resizeAnEvent: t } = this.domEvents, i = this.view.events.find((r) => r._eid === t._eid) || { segments: {} }, { minutes: n, cursorCoords: l } = this.minutesAtCursor(e), s = i.segments && i.segments[t.segment], { date: o, event: a } = this.utils, d = Math.max(n, this.timeFrom + 1, (s || i).startTimeMinutes + 1);
  if (i.endTimeMinutes = t.endTimeMinutes = d, this.snapToTime) {
    const r = i.endTimeMinutes + this.snapToTime / 2;
    i.endTimeMinutes = r - r % this.snapToTime;
  }
  if (s && (s.endTimeMinutes = i.endTimeMinutes), i.end.setHours(0, i.endTimeMinutes, i.endTimeMinutes === 1440 ? -1 : 0, 0), this.resizeX && this.isWeekView) {
    i.daysCount = o.countDays(i.start, i.end);
    const r = this.cellsEl, u = r.offsetWidth / r.childElementCount, m = Math.floor(l.x / u);
    if (t.startCell === null && (t.startCell = m - (i.daysCount - 1)), t.endCell !== m) {
      t.endCell = m;
      const p = o.addDays(i.start, m - t.startCell), E = Math.max(o.countDays(i.start, p), 1);
      if (E !== i.daysCount) {
        let _ = null;
        _ = E > i.daysCount ? a.addEventSegment(i) : a.removeEventSegment(i), t.segment = _, i.endTimeMinutes += 1e-3;
      }
    }
  }
  this.$emit("event-resizing", { _eid: i._eid, end: i.end, endTimeMinutes: i.endTimeMinutes });
}, eventDragCreation(e) {
  const { dragCreateAnEvent: t } = this.domEvents, { start: i, startCursorY: n, split: l } = t, s = new Date(i), { minutes: o, cursorCoords: { y: a } } = this.minutesAtCursor(e);
  if (t.event || !(Math.abs(n - a) < this.dragToCreateThreshold))
    if (t.event) {
      if (s.setHours(0, o, o === 1440 ? -1 : 0, 0), this.snapToTime) {
        let u = 60 * s.getHours() + s.getMinutes();
        const m = u + this.snapToTime / 2;
        u = m - m % this.snapToTime, s.setHours(0, u, 0, 0);
      }
      const d = i < s, { event: r } = t;
      r.start = d ? i : s, r.end = d ? s : i, r.startTimeMinutes = 60 * r.start.getHours() + r.start.getMinutes(), r.endTimeMinutes = 60 * r.end.getHours() + r.end.getMinutes();
    } else {
      if (t.event = this.utils.event.createAnEvent(i, 1, { split: l }), !t.event)
        return t.start = null, t.split = null, void (t.event = null);
      t.event.resizing = true;
    }
}, unfocusEvent() {
  const { focusAnEvent: e, clickHoldAnEvent: t } = this.domEvents, i = this.view.events.find((n) => n._eid === (e._eid || t._eid));
  e._eid = null, t._eid = null, i && (i.focused = false, i.deleting = false);
}, cancelDelete() {
  const { clickHoldAnEvent: e } = this.domEvents;
  if (e._eid) {
    const t = this.view.events.find((i) => i._eid === e._eid);
    t && (t.deleting = false), e._eid = null, e.timeoutId = null;
  }
}, onEventTitleBlur(e, t) {
  if (t.title === e.target.innerHTML)
    return;
  const i = t.title;
  t.title = e.target.innerHTML;
  const n = this.cleanupEvent(t);
  this.$emit("event-title-change", { event: n, oldTitle: i }), this.$emit("event-change", { event: n, originalEvent: { ...n, title: i } });
}, updateMutableEvents() {
  const e = this.utils.date;
  this.mutableEvents = [], this.events.forEach((t) => {
    const i = typeof t.start == "string" ? e.stringToDate(t.start) : t.start, n = e.formatDateLite(i), l = e.dateToMinutes(i);
    let s = null;
    typeof t.end == "string" && t.end.includes("24:00") ? (s = new Date(t.end.replace(" 24:00", "")), s.setHours(23, 59, 59, 0)) : s = typeof t.end == "string" ? e.stringToDate(t.end) : t.end;
    let o = e.formatDateLite(s), a = e.dateToMinutes(s);
    a && a !== 1440 || (!this.time || typeof t.end == "string" && t.end.length === 10 ? s.setHours(23, 59, 59, 0) : s.setSeconds(s.getSeconds() - 1), o = e.formatDateLite(s), a = 1440);
    const d = n !== o;
    t = Object.assign({ ...this.utils.event.eventDefaults }, t, { _eid: `${this._.uid}_${this.eventIdIncrement++}`, segments: d ? {} : null, start: i, startTimeMinutes: l, end: s, endTimeMinutes: a, daysCount: d ? e.countDays(i, s) : 1, class: t.class }), this.mutableEvents.push(t);
  });
}, minutesAtCursor(e) {
  return this.utils.cell.minutesAtCursor(e);
}, createEvent(e, t, i = {}) {
  return this.utils.event.createAnEvent(e, t, i);
}, cleanupEvent(e) {
  return e = { ...e }, ["segments", "deletable", "deleting", "titleEditable", "resizable", "resizing", "draggable", "dragging", "draggingStatic", "focused"].forEach((t) => {
    t in e && delete e[t];
  }), e.repeat || delete e.repeat, e;
}, emitWithEvent(e, t) {
  this.$emit(e, this.cleanupEvent(t));
}, updateSelectedDate(e) {
  if ((e = e && typeof e == "string" ? this.utils.date.stringToDate(e) : new Date(e)) && e instanceof Date) {
    const { selectedDate: t } = this.view;
    t && (this.transitionDirection = t.getTime() > e.getTime() ? "left" : "right"), e.setHours(0, 0, 0, 0), t && t.getTime() === e.getTime() || (this.view.selectedDate = e), this.switchView(this.view.id);
  }
  this.$emit("update:selected-date", this.view.selectedDate);
}, getWeekNumber(e) {
  const t = this.utils.date, i = this.firstCellDateWeekNumber + e, n = this.startWeekOnSunday ? 1 : 0;
  return i > 52 ? t.getWeek(t.addDays(this.view.firstCellDate, 7 * e + n)) : i;
}, timeTick() {
  this.now = /* @__PURE__ */ new Date(), this.timeTickerIds[1] = setTimeout(this.timeTick, 6e4);
}, updateDateTexts() {
  this.utils.date.updateTexts(this.texts);
}, alignWithScrollbar() {
  if (document.getElementById("vuecal-align-with-scrollbar"))
    return;
  const e = this.$refs.vuecal.getElementsByClassName("vuecal__scrollbar-check")[0], t = e.offsetWidth - e.children[0].offsetWidth;
  if (t) {
    const i = document.createElement("style");
    i.id = "vuecal-align-with-scrollbar", i.type = "text/css", i.innerHTML = `.vuecal--view-with-time .vuecal__weekdays-headings,.vuecal--view-with-time .vuecal__all-day {padding-right: ${t}px}`, document.head.appendChild(i);
  }
}, cellOrSplitHasEvents: (e, t = null) => e.length && (!t && e.length || t && e.some((i) => i.split === t.id)) }, created() {
  this.utils.cell = new de(this), this.utils.event = new ue(this, this.utils.date), this.loadLocale(this.locale), this.editEvents.drag && this.loadDragAndDrop(), this.updateMutableEvents(this.events), this.view.id = this.currentView, this.selectedDate ? this.updateSelectedDate(this.selectedDate) : (this.view.selectedDate = /* @__PURE__ */ new Date(), this.switchView(this.currentView)), this.time && this.watchRealTime && (this.timeTickerIds[0] = setTimeout(this.timeTick, 1e3 * (60 - this.now.getSeconds())));
}, mounted() {
  const e = this.utils.date, t = "ontouchstart" in window, { resize: i, drag: n, create: l, delete: s, title: o } = this.editEvents, a = this.onEventClick && typeof this.onEventClick == "function";
  (i || n || l || s || o || a) && window.addEventListener(t ? "touchend" : "mouseup", this.onMouseUp), (i || n || l && this.dragToCreateEvent) && window.addEventListener(t ? "touchmove" : "mousemove", this.onMouseMove, { passive: false }), o && window.addEventListener("keyup", this.onKeyUp), t && (this.$refs.vuecal.oncontextmenu = function(u) {
    u.preventDefault(), u.stopPropagation();
  }), this.hideBody || this.alignWithScrollbar();
  const d = this.view.startDate, r = { view: this.view.id, startDate: d, endDate: this.view.endDate, ...this.isMonthView ? { firstCellDate: this.view.firstCellDate, lastCellDate: this.view.lastCellDate } : {}, events: this.view.events.map(this.cleanupEvent), ...this.isWeekView ? { week: e.getWeek(this.startWeekOnSunday ? e.addDays(d, 1) : d) } : {} };
  this.$emit("ready", r), this.ready = true;
}, beforeUnmount() {
  const e = "ontouchstart" in window;
  window.removeEventListener(e ? "touchmove" : "mousemove", this.onMouseMove, { passive: false }), window.removeEventListener(e ? "touchend" : "mouseup", this.onMouseUp), window.removeEventListener("keyup", this.onKeyUp), this.timeTickerIds[0] && clearTimeout(this.timeTickerIds[0]), this.timeTickerIds[1] && clearTimeout(this.timeTickerIds[1]), this.timeTickerIds = [null, null];
}, computed: { editEvents() {
  return this.editableEvents && typeof this.editableEvents == "object" ? { title: !!this.editableEvents.title, drag: !!this.editableEvents.drag, resize: !!this.editableEvents.resize, create: !!this.editableEvents.create, delete: !!this.editableEvents.delete } : { title: !!this.editableEvents, drag: !!this.editableEvents, resize: !!this.editableEvents, create: !!this.editableEvents, delete: !!this.editableEvents };
}, views() {
  return { years: { label: this.texts.years, enabled: !this.disableViews.includes("years") }, year: { label: this.texts.year, enabled: !this.disableViews.includes("year") }, month: { label: this.texts.month, enabled: !this.disableViews.includes("month") }, week: { label: this.texts.week, enabled: !this.disableViews.includes("week") }, day: { label: this.texts.day, enabled: !this.disableViews.includes("day") } };
}, currentView() {
  return this.validateView(this.activeView);
}, enabledViews() {
  return Object.keys(this.views).filter((e) => this.views[e].enabled);
}, hasTimeColumn() {
  return this.time && this.isWeekOrDayView;
}, isShortMonthView() {
  return this.isMonthView && this.eventsOnMonthView === "short";
}, firstCellDateWeekNumber() {
  const e = this.utils.date, t = this.view.firstCellDate;
  return e.getWeek(this.startWeekOnSunday ? e.addDays(t, 1) : t);
}, timeCells() {
  const e = [];
  for (let t = this.timeFrom, i = this.timeTo; t < i; t += this.timeStep)
    e.push({ hours: Math.floor(t / 60), minutes: t % 60, label: this.utils.date.formatTime(t, this.TimeFormat), value: t });
  return e;
}, TimeFormat() {
  return this.timeFormat || (this.twelveHour ? "h:mm{am}" : "HH:mm");
}, daySplits() {
  return (this.splitDays.filter((e) => !e.hide) || []).map((e, t) => ({ ...e, id: e.id || t + 1 }));
}, hasSplits() {
  return this.daySplits.length && this.isWeekOrDayView;
}, hasShortEvents() {
  return this.showAllDayEvents === "short";
}, cellOrSplitMinWidth() {
  let e = null;
  return this.hasSplits && this.minSplitWidth ? e = this.visibleDaysCount * this.minSplitWidth * this.daySplits.length : this.minCellWidth && this.isWeekView && (e = this.visibleDaysCount * this.minCellWidth), e;
}, allDayBar() {
  let e = this.allDayBarHeight || null;
  return e && !isNaN(e) && (e += "px"), { cells: this.viewCells, options: this.$props, label: this.texts.allDay, shortEvents: this.hasShortEvents, daySplits: this.hasSplits && this.daySplits || [], cellOrSplitMinWidth: this.cellOrSplitMinWidth, height: e };
}, minTimestamp() {
  let e = null;
  return this.minDate && typeof this.minDate == "string" ? e = this.utils.date.stringToDate(this.minDate) : this.minDate && this.minDate instanceof Date && (e = this.minDate), e ? e.getTime() : null;
}, maxTimestamp() {
  let e = null;
  return this.maxDate && typeof this.maxDate == "string" ? e = this.utils.date.stringToDate(this.maxDate) : this.maxDate && this.minDate instanceof Date && (e = this.maxDate), e ? e.getTime() : null;
}, weekDays() {
  let { weekDays: e, weekDaysShort: t = [] } = this.texts;
  return e = e.slice(0).map((i, n) => ({ label: i, ...t.length ? { short: t[n] } : {}, hide: this.hideWeekends && n >= 5 || this.hideWeekdays.length && this.hideWeekdays.includes(n + 1) })), this.startWeekOnSunday && e.unshift(e.pop()), e;
}, weekDaysInHeader() {
  return this.isMonthView || this.isWeekView && !this.minCellWidth && !(this.hasSplits && this.minSplitWidth);
}, months() {
  return this.texts.months.map((e) => ({ label: e }));
}, specialDayHours() {
  return this.specialHours && Object.keys(this.specialHours).length ? Array(7).fill("").map((e, t) => {
    let i = this.specialHours[t + 1] || [];
    return Array.isArray(i) || (i = [i]), e = [], i.forEach(({ from: n, to: l, class: s, label: o }, a) => {
      e[a] = { day: t + 1, from: [null, void 0].includes(n) ? null : 1 * n, to: [null, void 0].includes(l) ? null : 1 * l, class: s || "", label: o || "" };
    }), e;
  }) : {};
}, viewTitle() {
  const e = this.utils.date;
  let t = "";
  const i = this.view.startDate, n = i.getFullYear(), l = i.getMonth();
  switch (this.view.id) {
    case "years":
      t = this.texts.years;
      break;
    case "year":
      t = n;
      break;
    case "month":
      t = `${this.months[l].label} ${n}`;
      break;
    case "week": {
      const s = this.view.endDate, o = i.getFullYear();
      let a = this.texts.months[i.getMonth()];
      this.xsmall && (a = a.substring(0, 3));
      let d = `${a} ${o}`;
      if (s.getMonth() !== i.getMonth()) {
        const r = s.getFullYear();
        let u = this.texts.months[s.getMonth()];
        this.xsmall && (u = u.substring(0, 3)), d = o === r ? `${a} - ${u} ${o}` : this.small ? `${a.substring(0, 3)} ${o} - ${u.substring(0, 3)} ${r}` : `${a} ${o} - ${u} ${r}`;
      }
      t = `${this.texts.week} ${e.getWeek(this.startWeekOnSunday ? e.addDays(i, 1) : i)} (${d})`;
      break;
    }
    case "day":
      t = this.utils.date.formatDate(i, this.texts.dateFormat, this.texts);
  }
  return t;
}, viewCells() {
  const e = this.utils.date;
  let t = [], i = null, n = false;
  this.watchRealTime || (this.now = /* @__PURE__ */ new Date());
  const l = this.now;
  switch (this.view.id) {
    case "years":
      i = this.view.startDate.getFullYear(), t = Array.apply(null, Array(25)).map((s, o) => {
        const a = new Date(i + o, 0, 1), d = new Date(i + o + 1, 0, 1);
        return d.setSeconds(-1), { startDate: a, formattedDate: e.formatDateLite(a), endDate: d, content: i + o, current: i + o === l.getFullYear() };
      });
      break;
    case "year":
      i = this.view.startDate.getFullYear(), t = Array.apply(null, Array(12)).map((s, o) => {
        const a = new Date(i, o, 1), d = new Date(i, o + 1, 1);
        return d.setSeconds(-1), { startDate: a, formattedDate: e.formatDateLite(a), endDate: d, content: this.xsmall ? this.months[o].label.substr(0, 3) : this.months[o].label, current: o === l.getMonth() && i === l.getFullYear() };
      });
      break;
    case "month": {
      const s = this.view.startDate.getMonth(), o = new Date(this.view.firstCellDate);
      n = false, t = Array.apply(null, Array(42)).map((a, d) => {
        const r = e.addDays(o, d), u = new Date(r);
        u.setHours(23, 59, 59, 0);
        const m = !n && e.isToday(r) && !n++;
        return { startDate: r, formattedDate: e.formatDateLite(r), endDate: u, content: r.getDate(), today: m, outOfScope: r.getMonth() !== s, class: `vuecal__cell--day${r.getDay() || 7}` };
      }), (this.hideWeekends || this.hideWeekdays.length) && (t = t.filter((a) => {
        const d = a.startDate.getDay() || 7;
        return !(this.hideWeekends && d >= 6 || this.hideWeekdays.length && this.hideWeekdays.includes(d));
      }));
      break;
    }
    case "week": {
      n = false;
      const s = this.view.startDate, o = this.weekDays;
      t = o.map((a, d) => {
        const r = e.addDays(s, this.startWeekOnSunday ? d - 1 : d), u = new Date(r);
        u.setHours(23, 59, 59, 0);
        const m = (r.getDay() || 7) - 1;
        return { startDate: r, formattedDate: e.formatDateLite(r), endDate: u, today: !n && e.isToday(r) && !n++, specialHours: this.specialDayHours[m] || [] };
      }).filter((a, d) => !o[d].hide);
      break;
    }
    case "day": {
      const s = this.view.startDate, o = new Date(this.view.startDate);
      o.setHours(23, 59, 59, 0);
      const a = (s.getDay() || 7) - 1;
      t = [{ startDate: s, formattedDate: e.formatDateLite(s), endDate: o, today: e.isToday(s), specialHours: this.specialDayHours[a] || [] }];
      break;
    }
  }
  return t;
}, visibleDaysCount() {
  return this.isDayView ? 1 : 7 - this.weekDays.reduce((e, t) => e + t.hide, 0);
}, cellWidth() {
  return 100 / this.visibleDaysCount;
}, cssClasses() {
  const { resizeAnEvent: e, dragAnEvent: t, dragCreateAnEvent: i } = this.domEvents;
  return { [`vuecal--${this.view.id}-view`]: true, [`vuecal--${this.locale}`]: this.locale, "vuecal--no-time": !this.time, "vuecal--view-with-time": this.hasTimeColumn, "vuecal--week-numbers": this.showWeekNumbers && this.isMonthView, "vuecal--twelve-hour": this.twelveHour, "vuecal--click-to-navigate": this.clickToNavigate, "vuecal--hide-weekends": this.hideWeekends, "vuecal--split-days": this.hasSplits, "vuecal--sticky-split-labels": this.hasSplits && this.stickySplitLabels, "vuecal--overflow-x": this.minCellWidth && this.isWeekView || this.hasSplits && this.minSplitWidth, "vuecal--small": this.small, "vuecal--xsmall": this.xsmall, "vuecal--resizing-event": e._eid, "vuecal--drag-creating-event": i.event, "vuecal--dragging-event": t._eid, "vuecal--events-on-month-view": this.eventsOnMonthView, "vuecal--short-events": this.isMonthView && this.eventsOnMonthView === "short", "vuecal--has-touch": typeof window < "u" && "ontouchstart" in window };
}, isYearsOrYearView() {
  return ["years", "year"].includes(this.view.id);
}, isYearsView() {
  return this.view.id === "years";
}, isYearView() {
  return this.view.id === "year";
}, isMonthView() {
  return this.view.id === "month";
}, isWeekOrDayView() {
  return ["week", "day"].includes(this.view.id);
}, isWeekView() {
  return this.view.id === "week";
}, isDayView() {
  return this.view.id === "day";
} }, watch: { events: { handler(e, t) {
  this.updateMutableEvents(e), this.addEventsToView();
}, deep: true }, locale(e) {
  this.loadLocale(e);
}, selectedDate(e) {
  this.updateSelectedDate(e);
}, activeView(e) {
  this.switchView(e);
} } };
var wt = B(vt, [["render", function(e, t, i, n, l, s) {
  const o = resolveComponent("vuecal-header"), a = resolveComponent("all-day-bar"), d = resolveComponent("weekdays-headings"), r = resolveComponent("vuecal-cell");
  return openBlock(), createElementBlock("div", { class: normalizeClass(["vuecal__flex vuecal", s.cssClasses]), column: "", ref: "vuecal", lang: i.locale }, [createVNode(o, { options: e.$props, "edit-events": s.editEvents, "view-props": { views: s.views, weekDaysInHeader: s.weekDaysInHeader }, "week-days": s.weekDays, "has-splits": s.hasSplits, "day-splits": s.daySplits, "switch-to-narrower-view": s.switchToNarrowerView }, createSlots({ "arrow-prev": withCtx(() => [renderSlot(e.$slots, "arrow-prev", {}, () => [createTextVNode(" "), Le, createTextVNode(" ")])]), "arrow-next": withCtx(() => [renderSlot(e.$slots, "arrow-next", {}, () => [createTextVNode(" "), Fe, createTextVNode(" ")])]), "today-button": withCtx(() => [renderSlot(e.$slots, "today-button", {}, () => [createBaseVNode("span", Be, toDisplayString(l.texts.today), 1)])]), title: withCtx(() => [renderSlot(e.$slots, "title", { title: s.viewTitle, view: l.view }, () => [createTextVNode(toDisplayString(s.viewTitle), 1)])]), _: 2 }, [e.$slots["weekday-heading"] ? { name: "weekday-heading", fn: withCtx(({ heading: u, view: m }) => [renderSlot(e.$slots, "weekday-heading", { heading: u, view: m })]), key: "0" } : void 0, e.$slots["split-label"] ? { name: "split-label", fn: withCtx(({ split: u }) => [renderSlot(e.$slots, "split-label", { split: u, view: l.view.id })]), key: "1" } : void 0]), 1032, ["options", "edit-events", "view-props", "week-days", "has-splits", "day-splits", "switch-to-narrower-view"]), i.hideBody ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", Ne, [createVNode(Transition, { name: `slide-fade--${l.transitionDirection}`, appear: i.transitions }, { default: withCtx(() => [(openBlock(), createElementBlock("div", { class: "vuecal__flex", style: { "min-width": "100%" }, key: !!i.transitions && l.view.id, column: "" }, [i.showAllDayEvents && s.hasTimeColumn && (!s.cellOrSplitMinWidth || s.isDayView && !i.minSplitWidth) ? (openBlock(), createBlock(a, normalizeProps(mergeProps({ key: 0 }, s.allDayBar)), { event: withCtx(({ event: u, view: m }) => [renderSlot(e.$slots, "event", { view: m, event: u }, () => [s.editEvents.title && u.titleEditable ? (openBlock(), createElementBlock("div", { key: 0, class: "vuecal__event-title vuecal__event-title--edit", contenteditable: "", onBlur: (p) => s.onEventTitleBlur(p, u), innerHTML: u.title }, null, 40, Ie)) : u.title ? (openBlock(), createElementBlock("div", { key: 1, class: "vuecal__event-title", innerHTML: u.title }, null, 8, ze)) : createCommentVNode("", true), !u.content || s.hasShortEvents || s.isShortMonthView ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 2, class: "vuecal__event-content", innerHTML: u.content }, null, 8, Pe))])]), _: 3 }, 16)) : createCommentVNode("", true), createBaseVNode("div", { class: normalizeClass(["vuecal__bg", { vuecal__flex: !s.hasTimeColumn }]), column: "" }, [createBaseVNode("div", Ue, [s.hasTimeColumn ? (openBlock(), createElementBlock("div", Re, [i.showAllDayEvents && s.cellOrSplitMinWidth && (!s.isDayView || i.minSplitWidth) ? (openBlock(), createElementBlock("div", { key: 0, class: "vuecal__all-day-text", style: normalizeStyle({ height: s.allDayBar.height }) }, [createBaseVNode("span", null, toDisplayString(l.texts.allDay), 1)], 4)) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(s.timeCells, (u, m) => (openBlock(), createElementBlock("div", { class: "vuecal__time-cell", key: m, style: normalizeStyle(`height: ${i.timeCellHeight}px`) }, [renderSlot(e.$slots, "time-cell", { hours: u.hours, minutes: u.minutes }, () => [qe, createBaseVNode("span", Ke, toDisplayString(u.label), 1)])], 4))), 128))])) : createCommentVNode("", true), i.showWeekNumbers && s.isMonthView ? (openBlock(), createElementBlock("div", Xe, [(openBlock(), createElementBlock(Fragment, null, renderList(6, (u) => createBaseVNode("div", { class: "vuecal__flex vuecal__week-number-cell", key: u, grow: "" }, [renderSlot(e.$slots, "week-number-cell", { week: s.getWeekNumber(u - 1) }, () => [createTextVNode(toDisplayString(s.getWeekNumber(u - 1)), 1)])])), 64))])) : createCommentVNode("", true), createBaseVNode("div", { class: normalizeClass(["vuecal__flex vuecal__cells", `${l.view.id}-view`]), grow: "", wrap: !s.cellOrSplitMinWidth || !s.isWeekView, column: !!s.cellOrSplitMinWidth }, [s.cellOrSplitMinWidth && s.isWeekView ? (openBlock(), createBlock(d, { key: 0, "transition-direction": l.transitionDirection, "week-days": s.weekDays, "switch-to-narrower-view": s.switchToNarrowerView, style: normalizeStyle(s.cellOrSplitMinWidth ? `min-width: ${s.cellOrSplitMinWidth}px` : "") }, createSlots({ _: 2 }, [e.$slots["weekday-heading"] ? { name: "weekday-heading", fn: withCtx(({ heading: u, view: m }) => [renderSlot(e.$slots, "weekday-heading", { heading: u, view: m })]), key: "0" } : void 0, e.$slots["split-label"] ? { name: "split-label", fn: withCtx(({ split: u }) => [renderSlot(e.$slots, "split-label", { split: u, view: l.view.id })]), key: "1" } : void 0]), 1032, ["transition-direction", "week-days", "switch-to-narrower-view", "style"])) : s.hasSplits && i.stickySplitLabels && i.minSplitWidth ? (openBlock(), createElementBlock("div", { key: 1, class: "vuecal__flex vuecal__split-days-headers", style: normalizeStyle(s.cellOrSplitMinWidth ? `min-width: ${s.cellOrSplitMinWidth}px` : "") }, [(openBlock(true), createElementBlock(Fragment, null, renderList(s.daySplits, (u, m) => (openBlock(), createElementBlock("div", { class: normalizeClass(["day-split-header", u.class || false]), key: m }, [renderSlot(e.$slots, "split-label", { split: u, view: l.view.id }, () => [createTextVNode(toDisplayString(u.label), 1)])], 2))), 128))], 4)) : createCommentVNode("", true), i.showAllDayEvents && s.hasTimeColumn && (s.isWeekView && s.cellOrSplitMinWidth || s.isDayView && s.hasSplits && i.minSplitWidth) ? (openBlock(), createBlock(a, normalizeProps(mergeProps({ key: 2 }, s.allDayBar)), { event: withCtx(({ event: u, view: m }) => [renderSlot(e.$slots, "event", { view: m, event: u }, () => [s.editEvents.title && u.titleEditable ? (openBlock(), createElementBlock("div", { key: 0, class: "vuecal__event-title vuecal__event-title--edit", contenteditable: "", onBlur: (p) => s.onEventTitleBlur(p, u), innerHTML: u.title }, null, 40, Ze)) : u.title ? (openBlock(), createElementBlock("div", { key: 1, class: "vuecal__event-title", innerHTML: u.title }, null, 8, Je)) : createCommentVNode("", true), !u.content || s.hasShortEvents || s.isShortMonthView ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 2, class: "vuecal__event-content", innerHTML: u.content }, null, 8, Qe))])]), _: 3 }, 16)) : createCommentVNode("", true), createBaseVNode("div", { class: "vuecal__flex", ref: (u) => l.cellsEl = u, grow: "", wrap: !s.cellOrSplitMinWidth || !s.isWeekView, style: normalizeStyle(s.cellOrSplitMinWidth ? `min-width: ${s.cellOrSplitMinWidth}px` : "") }, [(openBlock(true), createElementBlock(Fragment, null, renderList(s.viewCells, (u, m) => (openBlock(), createBlock(r, { key: m, options: e.$props, "edit-events": s.editEvents, data: u, "cell-width": i.hideWeekdays.length && (s.isWeekView || s.isMonthView) && s.cellWidth, "min-timestamp": s.minTimestamp, "max-timestamp": s.maxTimestamp, "cell-splits": s.hasSplits && s.daySplits || [] }, { "cell-content": withCtx(({ events: p, split: E, selectCell: _ }) => [renderSlot(e.$slots, "cell-content", { cell: u, view: l.view, goNarrower: _, events: p }, () => [E && !i.stickySplitLabels ? (openBlock(), createElementBlock("div", { key: 0, class: "split-label", innerHTML: E.label }, null, 8, tt)) : createCommentVNode("", true), u.content ? (openBlock(), createElementBlock("div", { key: 1, class: "vuecal__cell-date", innerHTML: u.content }, null, 8, it)) : createCommentVNode("", true), (s.isMonthView && !i.eventsOnMonthView || s.isYearsOrYearView && i.eventsCountOnYearView) && p.length ? (openBlock(), createElementBlock("div", st, [renderSlot(e.$slots, "events-count", { view: l.view, events: p }, () => [createTextVNode(toDisplayString(p.length), 1)])])) : createCommentVNode("", true), !s.cellOrSplitHasEvents(p, E) && s.isWeekOrDayView ? (openBlock(), createElementBlock("div", nt, [renderSlot(e.$slots, "no-event", {}, () => [createTextVNode(toDisplayString(l.texts.noEvent), 1)])])) : createCommentVNode("", true)])]), event: withCtx(({ event: p, view: E }) => [renderSlot(e.$slots, "event", { view: E, event: p }, () => [s.editEvents.title && p.titleEditable ? (openBlock(), createElementBlock("div", { key: 0, class: "vuecal__event-title vuecal__event-title--edit", contenteditable: "", onBlur: (_) => s.onEventTitleBlur(_, p), innerHTML: p.title }, null, 40, at)) : p.title ? (openBlock(), createElementBlock("div", { key: 1, class: "vuecal__event-title", innerHTML: p.title }, null, 8, lt)) : createCommentVNode("", true), !i.time || p.allDay || s.isMonthView && (p.allDay || i.showAllDayEvents === "short") || s.isShortMonthView ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", ot, [createTextVNode(toDisplayString(l.utils.date.formatTime(p.start, s.TimeFormat)), 1), p.endTimeMinutes ? (openBlock(), createElementBlock("span", rt, " - " + toDisplayString(l.utils.date.formatTime(p.end, s.TimeFormat, null, true)), 1)) : createCommentVNode("", true), p.daysCount > 1 && (p.segments[u.formattedDate] || {}).isFirstDay ? (openBlock(), createElementBlock("small", dt, " +" + toDisplayString(p.daysCount - 1) + toDisplayString((l.texts.day[0] || "").toLowerCase()), 1)) : createCommentVNode("", true)])), !p.content || s.isMonthView && p.allDay && i.showAllDayEvents === "short" || s.isShortMonthView ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 3, class: "vuecal__event-content", innerHTML: p.content }, null, 8, ut))])]), "no-event": withCtx(() => [renderSlot(e.$slots, "no-event", {}, () => [createTextVNode(toDisplayString(l.texts.noEvent), 1)])]), _: 2 }, 1032, ["options", "edit-events", "data", "cell-width", "min-timestamp", "max-timestamp", "cell-splits"]))), 128))], 12, et)], 10, Ge)])], 2)]))]), _: 3 }, 8, ["name", "appear"]), l.ready ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", ht, ct))]))], 10, Ye);
}]]);
export {
  wt as default
};
/*! Bundled license information:

vue-cal/dist/vue-cal.es.js:
  (**
    * vue-cal v4.8.1
    * (c) 2022 Antoni Andre <antoniandre.web@gmail.com>
    * @license MIT
    *)
*/
//# sourceMappingURL=vue-cal.js.map
